{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CGLib 1.\u5173\u4e8e CGLib (Computational Geometry Library)\uff0c\u5168\u79f0\u201c\u8ba1\u7b97\u51e0\u4f55\u5e93\u201d\uff0cC++\u8bed\u8a00\u5b9e\u73b0\u7684\u53ef\u8de8\u5e73\u53f0\u8fd0\u884c\u7684\u51e0\u4f55\u5e93\uff0c\u8986\u76d6\u5e38\u89c1\u51e0\u4f55\u7b97\u6cd5\u5185\u5bb9\uff0c\u5305\u62ec\u57fa\u7840\u6570\u636e\u7ed3\u6784\u3001\u4eff\u5c04\u53d8\u6362\u3001\u5e38\u7528\u8ba1\u7b97\u5de5\u5177\u3001\u5173\u7cfb\u8ba1\u7b97\u3001\u7f51\u683c\u5316\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u5b9e\u4f53\u9020\u578b\u3001\u66f2\u7ebf\u66f2\u9762\u3001\u7cbe\u5ea6&\u8bef\u5dee\u3001\u5176\u4ed6\u5e38\u89c1\u8bae\u9898\u53ca\u663e\u793a\u76f8\u5173\u3002 \u53bb\u4e0b\u8f7dCGlib \u540c\u65f6\u63d0\u4f9bC#\u7248\u5c01\u88c5\u5e93\u3002\u4e0b\u56fe\u4e2d \u84dd\u8272\u90e8\u5206 \u4e3a\u5df2\u6709\u6216\u6b63\u5728\u5efa\u8bbe\u4e2d\u3002 \u56fe\uff1aCGLib\u5e94\u7528\u67b6\u6784 Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u91cd\u8981\u7684\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e8b\u9879\u3002 \u63d0\u793a/\u8865\u5145 \u84dd\u8272 \u65b9\u6846\u662f\u4e3a\u4e86\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u63d0\u793a\u6216\u8865\u5145\u7684\u9644\u52a0\u4fe1\u606f\u3002 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41 \u7f51\u7ad9\uff1a cglib.net \u516c\u4f17\u53f7\uff1a \u54c8\u5e02\u96ea\u82b1 \u90ae\u7bb1\uff1a heuwzl@163.com CSDN\uff1a \u54c8\u5e02\u96ea\u82b1 \uff08\u70b9\u51fb\u6253\u5f00\u94fe\u63a5\uff09 CGLib \u63d0\u4f9b\u7684\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u63a5\u53e3\u4e3b\u8981\u96c6\u4e2d\u5728\u5982\u4e0b\u5934\u6587\u4ef6\u4e2d CGUtils.h : \u5305\u542b\u5b9e\u4f53\u9020\u578b\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5316\u3001\u8f6e\u5ed3\u63d0\u53d6\u3001\u751f\u6210\u8f6e\u5ed3\u6811\u3001\u51f8\u5206\u5272\u3001\u4e8c\u4e09\u7ef4\u51f8\u5305\u3001\u7d27\u5bc6\u5916\u8f6e\u5ed3\u3001\u9762\u79ef\u3001\u4f53\u79ef\u8ba1\u7b97\uff0c\u53ca\u4e00\u7cfb\u5217\u5b9e\u4f53\u5173\u7cfb\u8ba1\u7b97\u7b49\u63a5\u53e3\uff1b CurveTool.h : \u5305\u542b\u8ddd\u79bb\u3001\u6295\u5f71\u3001\u6cd5\u5411\u8ba1\u7b97\u3001\u5207\u5272\u3001\u7ebf\u4ea4\u70b9\u3001\u70b9\u5408\u5e76\u3001\u7ebf\u53bb\u91cd\u7b49\u57fa\u7840\u63a5\u53e3\uff1b BooleanUtils.h : \u8f6e\u5ed3\u5e03\u5c14\u8fd0\u7b97\u76f8\u5173\u63a5\u53e3\uff0c\u5305\u62ec\u4ea4\u3001\u5e76\u3001\u5dee\u3001\u53d6\u53cd\u63a5\u53e3\uff1b Paving.h \u63d0\u4f9b\u8f6e\u5ed3\u94fa\u88c5\u7b97\u6cd5\u63a5\u53e3\uff1b 1.1.\u57fa\u7840\u6982\u5ff5 \u53f3\u624b\u6cd5\u5219 \u4eff\u5c04\u53d8\u6362 Z-Up\u548cY-Up BSP \u4e8c\u53c9\u6811 \u516b\u53c9\u6811 \u89d2\u5ea6\u548c\u5f27\u5ea6 \u534a\u8fb9\u7ed3\u6784 \u5206\u6cbb\u6cd5 \u9012\u63a8 \u589e\u91cf\u6784\u5efa \u8def\u5f84\u89c4\u5212 \u5939\u89d2\u6781\u503c ...... 2.\u57fa\u7840\u6570\u636e\u7ed3\u6784 2.1.\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe \u5b9e\u4f53\u7ed3\u6784\u7684\u8868\u8fbe\u7531\u591a\u79cd\u65b9\u5f0f\uff0c\u5982\u5206\u89e3\u8868\u793a\u3001\u6784\u9020\u8868\u793a CSG \uff08Constructive Solid Geometry\uff09\u548c\u8fb9\u754c\u8868\u793a BRep \uff08Boundary Representation\uff09\u7b49\u3002 \u8865\u5145\uff1a \u5e38\u89c1\u7684\u5206\u89e3\u8868\u793a\u6cd5\u6709 \u56db\u53c9\u6811\u3001\u516b\u53c9\u6811\u3001BSP\u6811 \u7b49\u65b9\u5f0f\u3002 CSG \u65b9\u5f0f\u51fa\u73b0\u8f83\u65e9\uff0c\u540e\u6765\u51fa\u73b0\u4e86BRep\u666e\u53ca\u6bd4\u8f83\u5feb\uff0c\u73b0\u5728\u5927\u90e8\u5206\u9886\u5148\u7684\u51e0\u4f55\u5185\u6838 \uff08ACIS\u3001PS\u3001OCC\u7b49\uff09 \u91c7\u7528 BRep \u65b9\u5f0f\uff0c\u6709\u5173\u4e24\u8005\u7684\u4f18\u7f3a\u70b9\u548c\u9002\u7528\u573a\u666f\u6bd4\u8f83\u7684\u8ba8\u8bba\u5df2\u6709\u5f88\u591a\uff0c\u672c\u6587\u4e0d\u518d\u8d58\u8ff0\u3002 CGLib \u91c7\u7528 BRep \u65b9\u5f0f\u8868\u8fbe\u5b9e\u4f53\u7ed3\u6784\uff0c\u5b9e\u4f53\u76f8\u5173\u7684\u8ba1\u7b97\u5927\u591a\u4e5f\u57fa\u4e8e BRep \u7ed3\u6784\u8fdb\u884c\u3002 \u5f53\u524d\u5de5\u4e1a\u8f6f\u4ef6\u53d1\u5c55\u8f83\u5feb\uff0c\u6570\u5b57\u5316\u76f8\u5173\u5e73\u53f0\u548c\u8f6f\u4ef6\u767e\u5bb6\u4e89\u9e23\uff0c \u4e91\u5316 \u662f\u5f53\u524d\u5de5\u4e1a\u8f6f\u4ef6\u70ed\u95e8\u7684\u53d1\u5c55\u65b9\u5411\u4e4b\u4e00\uff0c\u800c\u6709\u5173\u91c7\u7528\u54ea\u79cd\u65b9\u5f0f\u8fdb\u884c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u4f3c\u4e4e\u8ba8\u8bba\u975e\u5e38\u591a\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u539f\u7406\u7279\u70b9\u548c\u5e94\u7528\u6846\u67b6\u903b\u8f91\uff0c\u518d\u591a\u7684\u8ba8\u8bba\u4e5f\u53ef\u80fd\u4e0d\u7740\u8981\u70b9\u3002 \u4e0d\u540c\u7684\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u7279\u70b9\u4e0d\u540c\uff0c\u5728\u51e0\u4f55\u5185\u6838\u8303\u7574\u5185\u5c24\u4e3a\u5173\u6ce8\uff0c\u6bd4\u5982\u5e03\u5c14\u8fd0\u7b97\u7684\u5b9e\u73b0\u65b9\u6848\u548c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5bc6\u5207\u76f8\u5173\uff0c\u6709CSG\u5e03\u5c14\u8fd0\u7b97\u3001BRep\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u7b49\u591a\u79cd\u65b9\u5f0f\uff1b\u518d\u6bd4\u5982\u5173\u7cfb\u5224\u65ad\u4e5f\u79bb\u4e0d\u5f00\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u70b9/\u7ebf/\u9762/\u5b9e\u4f53\u4e0e\u5b9e\u4f53\u5173\u7cfb\u7b49\u8ba1\u7b97\u3002\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u662f\u51e0\u4f55\u5e93\u57fa\u7840\u6570\u636e\u7ed3\u6784\u8868\u8fbe\u7684\u91cd\u8981\u90e8\u5206\uff0c\u4e5f\u662f\u51e0\u4f55\u5e93\u7684\u57fa\u7840\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u5e94\u7528\uff0c\u9700\u8981\u5728\u5e73\u53f0\u5c42\u8fdb\u884c\u5c01\u88c5\u548c\u5b9e\u73b0\uff0c\u63d0\u4f9b\u4fbf\u4e8e\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u652f\u6491\u5e94\u7528\u4fa7\u7684\u5f00\u53d1\u3002\u5e73\u53f0\u5c42\u4e00\u822c\u4f1a\u5c01\u88c5\u4e0d\u4fbf\u4e8e\u7406\u89e3\u7684\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\uff0c\u4ee5\u53c2\u6570\u5316\u6570\u636e\u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u7acb\u65b9\u4f53\u5177\u6709\u957f\u5bbd\u9ad8\uff08Length/Width/Height\uff09\u53c2\u6570\uff0c\u800c\u5706\u5177\u6709\u5706\u5fc3\uff08Center\uff09\u548c\u534a\u5f84\uff08Radius\uff09\u53c2\u6570\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5e73\u53f0\u548c\u5e94\u7528\u5c42\u4e0d\u5173\u7cfb\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u4e00\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff08\u5982\u62fe\u53d6\u9762\uff09\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6839\u636e\u9700\u6c42\u573a\u666f\u7279\u70b9\u8fdb\u884c\u51e0\u4f55\u5e93\u7684\u9009\u7528\uff0c\u4f5c\u4e3a\u51e0\u4f55\u5e93\u91cd\u8981\u57fa\u7840\uff0c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u4ecd\u7136\u662f\u91cd\u8981\u8003\u8651\u7684\u65b9\u9762\uff0c\u6bd5\u7adf\u5728\u5173\u6ce8\u8f7b\u91cf\u7ea7\u4f7f\u7528\u7684\u573a\u666f\uff0c\u6ca1\u6709\u591a\u5c11\u4eba\u613f\u610f\u5728CSG\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u51e0\u4f55\u8ba1\u7b97\u3002 \u56fe\uff1a\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5728\u51e0\u4f55\u5e93\u5e94\u7528\u4f53\u7cfb\u4e2d\u7684\u4f4d\u7f6e 2.2.\u5176\u4ed6 \u57fa\u7840\u6570\u636e\u7ed3\u6784\u8fd8\u5305\u62ec\u5411\u91cf\u3001\u77e9\u9635\u3001\u70b9\u3001\u7ebf\u3001\u9762\u3001\u5e73\u9762\u7b49\u4ee5\u53ca\u76f8\u5173\u57fa\u7840\u65b9\u6cd5\uff0c\u5982\u5411\u91cf\u70b9\u4e58/\u53c9\u4e58\u3001\u77e9\u9635\u8fd0\u7b97\u7b49\u3002 \u8fd9\u91cc\u5199\u4e00\u53e5\u4ee4\u4f5c\u8005\u611f\u89e6\u9887\u6df1\u7684\u8bdd\uff1a \u6ca1\u6709\u4eba\u624d\uff0c\u4e00\u5207\u8c0b\u7565\u5747\u662f\u7a7a\u8c08\uff1b\u8131\u79bb\u4eba\u624d\u7684\u8c0b\u7565\u53ef\u80fd\u88ab\u79f0\u4e3a\u9634\u8c0b\u8be1\u8ba1 3.\u4eff\u5c04\u53d8\u6362 CGLib\u652f\u6301\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u4e2d\u7684\u7f29\u653e\u3001\u65cb\u8f6c\u3001\u5e73\u79fb\u4ee5\u53ca\u975e\u5747\u5300\u53d8\u6362\uff0c\u5f53\u7136\u4e5f\u652f\u6301\u5de6/\u53f3\u624b\u5750\u6807\u7cfb\u4e4b\u95f4\u7684\u8f6c\u6362\u3001Y-Up/Z-Up\u8f6c\u6362\u3001\u955c\u50cf\u8f6c\u6362\u7b49\uff0c\u8fd9\u5e76\u4e0d\u662f\u4ec0\u4e48\u9ad8\u6df1\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u77e9\u9635\u5e76\u6ca1\u6709\u548c\u5de6\u624b/\u53f3\u624b\u5750\u6807\u7cfb\u6982\u5ff5\u7ed1\u5b9a\uff0c\u4ed6\u662f\u7a7a\u95f4\u59ff\u6001\u53d8\u6362\u7684\u6570\u5b66\u8868\u8fbe\u3002 4.\u5e38\u7528\u8ba1\u7b97\u5de5\u5177 4.1.\u957f\u5ea6 CGLib\u63d0\u4f9b\u7ebf\u6bb5\uff08Line\uff09\u3001\u5706\u5f27\u7ebf\uff08Arc\uff09\u3001\u692d\u5706\u5f27\u7ebf\uff08EllipseArc\uff09\u7684\u957f\u5ea6\u8ba1\u7b97\u3002\u6b64\u5916\u8fd8\u63d0\u4f9bNurbs\u66f2\u7ebf\u957f\u5ea6\u8ba1\u7b97\uff0c\u8fd9\u5c06\u5728\u66f2\u7ebf\u66f2\u9762\u7ae0\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u3002 4.2.\u9762\u79ef CGLib\u63d0\u4f9b\u9762\u7684\u9762\u79ef\u8ba1\u7b97\uff0c\u901a\u8fc7\u516c\u5f0f\u7684\u63a8\u5bfc\u7b80\u5316\u8ba1\u7b97\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u4f9b\u4e00\u79cd\u7cbe\u5ea6\u8f83\u9ad8\u7684\u9762\u79ef\u8ba1\u7b97\u7b97\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\u662f\u63d0\u4f9b\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u63a5\u53e3\uff0c\u5f53\u8f6e\u5ed3\u6216\u9762\u542b\u6709\u975e\u7ebf\u6bb5\u8fb9\uff08Edge\uff09\u65f6\uff0c\u9700\u8981\u5c06\u5176\u79bb\u6563\u4e3a\u7ebf\u6bb5\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5bf9\u4e8e\u6b64\u7c7b\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u5177\u6709\u8bef\u5dee\uff0c\u8bef\u5dee\u4e3b\u8981\u6765\u6e90\u4e8e\u66f2\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u7ebf\u6bb5\u8fc7\u7a0b\u3002CGLib\u63d0\u4f9b\u66f2\u7ebf\u79bb\u6563\u63a5\u53e3\u3002 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u4e00\u79cd\u8bef\u5dee\u8f83\u5c0f\u7684\u8f6e\u5ed3\u9762\u79ef\u8ba1\u7b97\u7b97\u6cd5 CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static double GetArea(const list<Line>& polygon, const Transform& trsW2L); static void GetTransformL2W(const list<Line>& polygon, Transform& trsL2W); // (\u63a8\u8350\u4f7f\u7528) CurveTool.h \u5728\u8ba1\u7b97\u6cd5\u5411\u65f6\u540c\u6837\u8fd4\u56de\u9762\u79ef static Vector3f GetNormal(const list<Line>& polygon, double& area); 4.3.\u4f53\u79ef CGLib\u63d0\u4f9b\u5b9e\u4f53\u4f53\u79ef\u8ba1\u7b97\uff0c\u901a\u8fc7\u516c\u5f0f\u7684\u63a8\u5bfc\u7b80\u5316\u8ba1\u7b97\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u4f9b\u7cbe\u5ea6\u8f83\u9ad8\u7684\u8ba1\u7b97\u7ed3\u679c\u3002\u7531\u4e8e\u4f53\u79ef\u8ba1\u7b97\u4f9d\u8d56\u5b9e\u4f53\u9762\u7684\u9762\u79ef\u8ba1\u7b97\uff0c\u5b9e\u4f53\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u5177\u5907\u4e0a\u8ff0\u9762\u79ef\u8ba1\u7b97\u7684\u7279\u70b9\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u957f\u5ea6\u3001\u9762\u79ef\u3001\u4f53\u79ef\u8ba1\u7b97\u7684\u601d\u60f3\u7406\u5ff5\u4e3b\u8981\u6765\u6e90\u4e8e\u5fae\u79ef\u5206\uff0c\u5fae\u5206\u548c\u79ef\u5206\u7684\u601d\u60f3\uff0c\u7136\u540e\u5e94\u7528\u4e8e\u7b97\u6cd5\u4e2d\u3002 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u51e0\u4f55\u7b97\u6cd5\u7cfb\u5217\uff1a\u7a7a\u95f4\u5b9e\u4f53\u4f53\u79ef\u8ba1\u7b97\u516c\u5f0f\u63a8\u5bfc CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static double GetVolume(const Body& body); 4.4.\u6cd5\u5411 CGLib\u63d0\u4f9b\u8f6e\u5ed3\u548c\u9762\u7684\u6cd5\u5411\u8ba1\u7b97\uff0c\u7ed3\u5408\u52a0\u6743\u5e73\u5747\u7684\u601d\u60f3\u63d0\u4f9b\u4e00\u79cd\u51c6\u786e\u4e14\u8bef\u5dee\u8f83\u5c0f\u7684\u6cd5\u5411\u8ba1\u7b97\u63a5\u53e3\u3002\u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\uff0c\u8f6e\u5ed3\u5750\u6807\u53ef\u80fd\u5f88\u5927\uff0c\u53ef\u80fd\u542b\u6709\u5fae\u5c0f\u7684\u8fb9\uff0c\u53ef\u80fd\u5177\u6709\u6574\u4f53\u5e73\u9762\u4f46\u5c40\u90e8\u7a7a\u95f4\u7684\u7279\u70b9......\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u8bef\u5dee\uff0c\u5728\u7b97\u6cd5\u5b9e\u73b0\u4e2d\u9700\u8981\u517c\u5bb9\u8003\u8651\u8fd9\u4e9b\u573a\u666f\uff0c\u56e0\u4e3a\u4f60\u65e0\u6cd5\u9884\u6d4b\u8c03\u7528\u63a5\u53e3\u4f20\u5165\u7684\u6570\u636e\uff0c\u4e5f\u5f88\u96be\u53bb\u8fdb\u884c\u9650\u5236\u3002 \u56fe\uff1a\u52a0\u6743\u5e73\u5747\u793a\u610f \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u4e00\u79cd\u8bef\u5dee\u8f83\u5c0f\u7684\u8ba1\u7b97\u8f6e\u5ed3\u6cd5\u5411\u7684\u65b9\u6cd5 CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CurveTool.h \u8ba1\u7b97\u6cd5\u5411\u540c\u65f6\u8fd4\u56de\u9762\u79ef static Vector3f GetNormal(const list<Line>& polygon, double& area); 4.5.\u66f2\u7387 CGLib\u66f2\u7387\u8ba1\u7b97\u8fd8\u4e0d\u591f\u5b8c\u5584\uff0c\u9700\u8981\u53bb\u5efa\u8bbe\u3002 4.6.\u5305\u56f4\u76d2 \u5305\u56f4\u76d2\u662f\u4ece\u4e8b\u56fe\u5f62\u51e0\u4f55\u76f8\u5173\u5f00\u53d1\u548c\u5e94\u7528\u5f00\u53d1\u8005\u975e\u5e38\u719f\u6089\u7684\u6982\u5ff5\uff0c\u5305\u62ecAABB\u5305\u56f4\u76d2\u3001OBB\u5305\u56f4\u76d2\uff0c\u5e7f\u4e49\u6765\u8bf4\u8fd8\u5305\u62ec\u5305\u56f4\u7403\u3001\u51f8\u5305\u3001\u6700\u5c0f\u5916\u63a5\u8f6e\u5ed3\u7b49\u3002 \u672c\u8282\u53ea\u5173\u6ce8\u4e0e\u4fa0\u4e49\u7684\u5305\u56f4\u76d2\u6982\u5ff5\uff0c\u6709\u5173\u5176\u4ed6\u6982\u5ff5\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u540e\u7eed\u7ae0\u8282\u6216\u53c2\u8003\u76f8\u5173\u8d44\u6599\u3002 CGLib\u63d0\u4f9bAABB\u5305\u56f4\u76d2\u7684\u8ba1\u7b97\u3002 \u56fe\uff1aAABB\u548cOBB\u5305\u56f4\u76d2\u7684\u533a\u522b CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static void getBoundingBox(const vector<pair<Vector3f, Vector3f>>& mapMeshId2BoundBox, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const list<Vector3f>& lstVertex, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const list<Line>& lstLine, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const Body& body, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const TriangleMesh* mesh, const Transform* trs, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox_IdentTrs(const TriangleMesh* mesh, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox_NotIdentTrs(const TriangleMesh* mesh, const Transform* trs, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); 4.7.\u51f8\u5305 \u51f8\u5305\u5305\u62ec\u4e8c\u7ef4\u51f8\u5305\u548c\u4e09\u7ef4\u51f8\u5305\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684\u6570\u636e\uff0c\u5176\u51f8\u5305\u8ba1\u7b97\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u65e0\u8bba\u91c7\u7528\u54ea\u79cd\u7b97\u6cd5\uff0c\u4e5f\u65e0\u8bba\u4ece\u6570\u636e\u7684\u4ec0\u4e48\u4f4d\u7f6e\u5f00\u59cb\u8ba1\u7b97\uff0c\u8fd9\u548cDelaunay\u4e09\u89d2\u5256\u5206\u7b97\u6cd5\u6709\u7c7b\u4f3c\u7684\u7279\u70b9\u3002 CGLib\u63d0\u4f9b\u4e8c\u7ef4\u51f8\u5305\u548c\u4e09\u7ef4\u51f8\u5305\u7684\u8ba1\u7b97\uff0c\u91c7\u7528\u589e\u91cf\u6784\u5efa\u7684\u601d\u60f3\u3002 4.7.1.\u4e8c\u7ef4\u51f8\u5305 CGLib\u63d0\u4f9b\u7684\u4e8c\u7ef4\u51f8\u5305\u8ba1\u7b97\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h static bool CalConvexHull(const list<Vector3f>& lstVertex, const Vector3f& normal, list<Line>& convexHull); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u51f8\u5305\u8ba1\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u4e00\u6bb5\u8f6f\u7ba1\u5e73\u9762\u6295\u5f71\u7684\u7684\u51f8\u5305 \u56fe\uff1a\u5c0f\u6811\u548c\u5c0f\u8349\u7684\u51f8\u5305-\u805a\u5149\u706f\u4e0b\u7684\u6548\u679c 4.7.2.\u4e09\u7ef4\u51f8\u5305 CGLib\u63d0\u4f9b\u7684\u4e09\u7ef4\u51f8\u5305\u8ba1\u7b97\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h static bool Cal3DConvexHull(const list<Vector3f>& lstVertex, Body& convexHull); \u56fe\uff1a\u589e\u91cf\u6784\u5efa\u793a\u610f \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u7a7a\u95f4\u70b9\u96c6\u7684\u4e09\u7ef4\u51f8\u5305\u6548\u679c\uff08\u5de6\u4e3a\u7ebf\u6846\u6a21\u5f0f\uff0c\u53f3\u4e3a\u5b9e\u4f53\u6a21\u5f0f\uff09 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u51e0\u4f55\u7b97\u6cd5\u7cfb\u5217-\u4e09\u7ef4\u51f8\u5305 4.8.\u7d27\u5bc6\u5916\u8f6e\u5ed3 CGLib\u652f\u6301\u8ba1\u7b97\u70b9\u96c6\u3001\u56fe\u50cf\u7684\u7d27\u6025\u5916\u8f6e\u5ed3\uff0c\u63d0\u4f9b\u7684\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGLib.h static bool CalMinHull(const list<Vector3f>& lstVertex, const Vector3f& normal, list<Line>& hull); \u56fe\u7247\u56fe\u50cf\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3\u8ba1\u7b97\u53ef\u53c2\u8003\u7ed3\u5408OpenCV\u5e93\u63d0\u53d6\u56fe\u50cf\u7684\u8f6e\u5ed3\u7ebf\u96c6\u5408\uff0c\u4e4b\u540e\u518d\u8c03\u7528CGlib\u63a5\u53e3\u5b9e\u73b0\u3002 int getContoursFromImage(const cv::String& folder, const cv::String& fileName, std::vector<std::vector<cv::Point>>& contours, cv::Mat& srcImage) { string filePath = folder + \"/\" + fileName; srcImage = cv::imread(filePath, cv::ImreadModes::IMREAD_UNCHANGED); //\u6761\u4ef6\u8bed\u53e5\u68c0\u67e5 srcImage \u56fe\u50cf\u662f\u5426\u4e3a\u7a7a\uff08\u5373\u56fe\u50cf\u662f\u5426\u672a\u6210\u529f\u52a0\u8f7d\uff09 if (srcImage.empty()) { printf(\"could not load image ...\"); return -1; } //cv::imshow(\"\u8f93\u5165\u56fe\u50cf\", srcImage); double thresh = 85; // \u63d0\u53d6\u8f6e\u5ed3 cv::Mat image = cv::imread(filePath, cv::IMREAD_GRAYSCALE); // \u8bfb\u53d6\u7070\u5ea6\u56fe\u50cf cv::Mat binaryImage; cv::threshold(image, binaryImage, thresh/*100*/, 255, cv::THRESH_BINARY); // \u4e8c\u503c\u5316\u5206\u5272\uff0c\u5927\u4e8e\u9608\u503c\u4e3a255\uff0c\u5c0f\u4e8e\u9608\u503c\u4e3a0 std::vector<cv::Vec4i> hierarchy; // \u904d\u5386\u8f6e\u5ed3\u5e76\u7ed8\u5236 cv::findContours(binaryImage, contours, hierarchy, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE); return 0; } \u63d0\u793a/\u8865\u5145 CGViewer \u76f4\u63a5\u63d0\u4f9b\u56fe\u7247\u7ed8\u5236\u548c\u5916\u8f6e\u5ed3\u63d0\u53d6\u529f\u80fd\uff0c\u5e76\u53ef\u5c06\u63d0\u53d6\u7684\u5916\u8f6e\u5ed3\u7ed8\u5236\u5230\u56fe\u7247\u4e2d\uff0c\u6548\u679c\u5982\u4e0b\u56fe\uff0c\u53ef\u514d\u8d39\u4f7f\u7528\u3002 \u56fe\uff1a\u7ebf\u96c6\u5408\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3 \u56fe\uff1a\u5c0f\u5973\u5b69\u56fe\u7247\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3 \u56fe\uff1a\u73ab\u7470\u82b1\u56fe\u7247\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3 4.9.\u79bb\u6563\uff08Tessellate\uff09 Tessellate\u8fd9\u4e00\u8bcd\u6c47\u5728\u6570\u5b66\u4e2d,\u7279\u522b\u662f\u5728\u51e0\u4f55\u5b66\u9886\u57df,\u5177\u6709\u72ec\u7279\u7684\u542b\u4e49\u3002\u5305\u62ec\u7ebf\u7684\u79bb\u6563\u3001\u9762\u7684\u79bb\u6563\u3001\u5b9e\u4f53\u7684\u79bb\u6563\u7b49\u6982\u5ff5\u3002 \u4f60\u53ef\u80fd\u5df2\u7ecf\u660e\u767d\u4e86\uff0c Important \u7ebf\u7684\u79bb\u6563\u662f\u5c06\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u82e5\u5e72\u4e2a\u7ebf\u6bb5\uff1b \u9762\u7684\u79bb\u6563\u662f\u9762\u7684\u7f51\u683c\u5316\uff08\u4e09\u89d2\u5316/\u56db\u8fb9\u5f62\u5316/\u51f8\u5206\u89e3\u7b49\uff09\uff1b \u800c\u5b9e\u4f53\u7684\u79bb\u6563\u5219\u662f\u5b9e\u4f53\u7684\u79bb\u6563\uff0c\u5c06\u5b9e\u4f53\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u4e00\u79cd\u6216\u591a\u79cd\u5f62\u72b6\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e0d\u540c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u5b9e\u4f53\u7684\u79bb\u6563\u662f\u4e0d\u540c\u7684\uff0c\u5bf9\u4e8eBRep\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b9e\u4f53\u7684\u79bb\u6563\u548c\u9762\u7684\u79bb\u6563\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\u3002\u5178\u578b\u7684\u5b9e\u4f53\u79bb\u6563\u8868\u73b0\u4e3a\u5b9e\u4f53\u7684\u7f51\u683c\u5316\u3001\u5b9e\u4f53\u7684\u51f8\u5206\u89e3\u7b49\u3002 CGLib\u63d0\u4f9b\u5982\u4e0b\u79bb\u6563\u8ba1\u7b97\uff1a \u5c06\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u82e5\u5e72\u6761\u7ebf\u6bb5\uff1b \u5c06\u9762\u79bb\u6563\u4e3a\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u67d0\u79cd\u5f62\u72b6\uff0c\u5305\u62ec\u9762\u7684\u7f51\u683c\u5316\u6216\u9762\u7684\u51f8\u5206\u89e3\uff1b \u5c06\u5b9e\u4f53\u79bb\u6563\u4e3a\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u4e09\u89d2\u5f62\uff0c\u5373\u5b9e\u4f53\u7684\u7f51\u683c\u5316\uff1b 4.10.UV\u8ba1\u7b97 UV\u8ba1\u7b97\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u91cd\u8981\u8bdd\u9898\u4e4b\u4e00\uff0c\u66f2\u7ebf/\u66f2\u9762\u7684\u53c2\u6570\u5316\u8868\u8fbe\u3001\u7eb9\u7406\u8d34\u56fe\u7684\u9576\u8d34\u7b49\u5747\u4e0e\u6b64\u76f8\u5173\u3002 CGLib\u7684UV\u8ba1\u7b97\u5c1a\u4e0d\u591f\u5b8c\u5584\uff0c\u6b63\u5728\u5efa\u8bbe\u4e2d\u3002 4.11.\u5f62\u5fc3 \u5f62\u5fc3\u5373\u51e0\u4f55\u4e2d\u5fc3\uff0c\u4f5c\u4e3a\u51e0\u4f55\u7279\u5f81\u4e4b\u4e00\uff0c\u4e5f\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u5e38\u89c1\u7684\u6982\u5ff5\u3002\u5305\u62ec\u7ebf\u7684\u4e2d\u5fc3\u3001\u9762\u7684\u5f62\u5fc3\u3001\u5b9e\u4f53\u7684\u51e0\u4f55\u4e2d\u5fc3\u7b49\uff0c\u6b64\u5916\u91cd\u5fc3\u3001\u60ef\u6027\u77e9\u7b49\u6982\u5ff5\u4e0e\u6b64\u5bc6\u5207\u76f8\u5173\u3002 5.\u5173\u7cfb\u8ba1\u7b97 \u5173\u7cfb\u8ba1\u7b97\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u91cd\u8981\u8bdd\u9898\uff0c\u5305\u62ec\u70b9\u3001\u7ebf\u3001\u9762\u3001\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6db5\u76d6\u5305\u542b\u5173\u7cfb\u3001\u76f8\u4ea4\u5173\u7cfb\u3001\u6700\u8fd1\u8ddd\u79bb\u3001\u6295\u5f71\u4ee5\u53ca\u884d\u751f\u7684\u5207\u5272\u7b49\u76f8\u5173\u5185\u5bb9\u3002 CGLib\u57fa\u672c\u5b8c\u6574\u7684\u63d0\u4f9b\u4e0a\u8ff0\u5927\u90e8\u5206\u8ba1\u7b97\uff0c\u5305\u62ec\u5173\u7cfb\u8ba1\u7b97\u3001\u5207\u5272\u3001\u5e03\u5c14\u8fd0\u7b97\u7b49\u76f8\u5173\u5185\u5bb9\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u3001 GLViewer \u4e2d\u8c03\u7528CGLib\u751f\u6210\u5e76\u663e\u793a\u7684\u3002 Important \u5173\u7cfb\u8ba1\u7b97 \u4e3a\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u57fa\u7840\u5de5\u5177\u7b97\u6cd5\uff0c\u662f\u91cd\u8981\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u5f88\u591a\u9ad8\u7ea7\u7b97\u6cd5\u6216\u5e94\u7528\u7b97\u6cd5\u5747\u9700\u8981\u4f9d\u8d56\u8fd9\u4e9b\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u5b9e\u73b0\u3002 \u56fe\uff1a\u7ebf\u5207\u5272\u8f6e\u5ed3 \u56fe\uff1a\u9762\u5207\u5272\u5b9e\u4f53 \u56fe\uff1a\u9762\u5207\u5272\u5b9e\u4f53 CGLib\u63d0\u4f9b\u7684\u90e8\u5206\u5173\u7cfb\u8ba1\u7b97\u51fd\u6570\u63a5\u53e3\u5982\u4e0b\uff0c\u5176\u4e2d\u5e03\u5c14\u8fd0\u7b97\u7b49\u4e3a\u5355\u72ec\u7684\u8bdd\u9898\u5185\u5bb9\uff0c\u76f8\u5173\u63a5\u53e3\u672a\u5217\u51fa\uff0c\u8be6\u89c1\u5bf9\u5e94\u7ae0\u8282\u5185\u5bb9\u3002 // \u6c42\u7ebf\u4e0e\u8f6e\u5ed3\u4ea4\u70b9 void LineIntersectPolygon(const Line& lineOri, _Iter first, _Iter last, bool recordBorder, const Face* faceTarget, vector<PointBorderData>& lstInterPt); // \u6c42\u7ebf\u4e0e\u9762\u4ea4\u70b9 void LineIntersectFace(const Line& line, const Face& faceTarget, bool recordBorder, vector<PointBorderData>& lstInterPt); // \u70b9\u4e0e\u7ebf\u5173\u7cfb\u5224\u65ad bool IsOnLine(const Vector3d& pt, const Vector3d& pt1, const Vector3d& pt2, float tolerance = 1e-3, float tolerance2 = 1e-4); // \u70b9\u4e0e\u4e09\u89d2\u5173\u7cfb\u5224\u65ad PointInTriangleType InTriangle(const Vector3f& pt0, const Vector3f& pt1, const Vector3f& pt2, const Vector3f& ptTarget); // \u70b9\u4e0e\u9762\u5173\u7cfb\u5224\u65ad PointInPolygonResult IsPointInFace(const Vector3f& point, const Face& face, bool needBoxDetermine = true); // \u70b9\u4e0e\u8f6e\u5ed3\u5173\u7cfb\u5224\u65ad PointInPolygonResult IsPointInPolygon(const Vector3f& point, const list<Line>& polygon, bool needBoxDetermine = true); // \u70b9\u4e0e\u7a7a\u95f4\u76d2\u5173\u7cfb\u5224\u65ad bool IsPointInBox(const Vector3f& point, const Vector3f& boundingBoxMin, const Vector3f& boundingBoxMax); // \u70b9\u4e0e\u5b9e\u4f53\u5173\u7cfb\u5224\u65ad bool IsPointInBody(const Vector3f& point, const Body& body); // \u7a7a\u95f4\u9762\u662f\u5426\u5207\u5272\u4e09\u89d2 bool PlaneCutTriangle(float a, float b, float c, float d, const TriangleData& tri, vector<TriangleData>& resultIn, vector<TriangleData>& resultOut); // \u7a7a\u95f4\u9762\u662f\u5426\u5207\u5272\u7ebf int PlaneCutLine(const Vector3f& vert1, const Vector3f& vert2, float a, float b, float c, float d, Vector3f& inter, bool& node1Out); // \u5b9e\u4f53\u4e0e\u9762\u662f\u5426\u76f8\u4ea4 bool IsFaceCutted(const Body& body, const Face& faceTarget); // \u5c04\u7ebf\u662f\u5426\u4e0e\u7403\u76f8\u4ea4 bool IsRayHitSphere(const Sphere& sphere, const Vector3f& start, const Vector3f& pntOn, vector<Vector3f>& pntsHit); // \u5c04\u7ebf\u662f\u5426\u4e0e\u9762\u76f8\u4ea4 bool IsRayHitFace(const Face& face, const Vector3f& faceNormal, const Vector3f& ptOri, const Vector3f& dir, double& t); // \u5c04\u7ebf\u662f\u5426\u4e0e\u4e09\u89d2\u76f8\u4ea4 bool IsRayHitTriangle(const Vector3f& orig, const Vector3f& dir, const Vector3f& v0, const Vector3f& v1, const Vector3f& v2, double* t); // \u5c04\u7ebf\u662f\u5426\u4e0e\u5305\u56f4\u76d2\u76f8\u4ea4 bool IsRayHitBoundingBox(const Vector3f& rayStart, const Vector3f& rayDir, const Vector3f* boundBoxMin, const Vector3f* boundBoxMax, Vector3f& interPt0, Vector3f& interPt1); // \u7a7a\u95f4\u7ebf\u662f\u5426\u76f8\u4ea4 bool IsLineIntersect(const Line& line1, const Line& line2, Vector3d& intersection); // \u7a7a\u95f4\u9762\u662f\u5426\u76f8\u4ea4 bool IsPlaneIntersect(const Vector3f& point1, const Vector3f& normal1, const Vector3f& point2, const Vector3f& normal2, Vector3f& ptOnInterLine, Vector3f& dirInterLine); 6.\u7f51\u683c\u5316 \u7f51\u683c\u5316\u662f\u56fe\u5f62\u51e0\u4f55\u7684\u6838\u5fc3\u8bdd\u9898\u4e4b\u4e00\uff0c\u4e5f\u662f\u8bc4\u5224\u51e0\u4f55\u5e93\u80fd\u529b\u7684\u91cd\u8981\u6307\u6807\u4f9d\u8d56\u9879\u3002 \u7f51\u683c\u5316\u5305\u62ecDelaunay\u4e09\u89d2\u5256\u5206\u3001Voronoi\u56fe\u751f\u6210\u3001\u7f51\u683c\u5256\u5206\u7b49\u5185\u5bb9\u3002 6.1.Delaunay\u4e09\u89d2\u5256\u5206 CGLib Delaunay\u4e09\u89d2\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u70b9\u5e76\u901a\u8fc7Delaunay\u7f51\u683c\u751f\u6210\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1aDelaunay\u5256\u5206 \u56fe\uff1aDelaunay\u5256\u5206 6.2.Voronoi\u56fe Voronoi\u56fe\u53ef\u7531Delaunay\u7f51\u683c\u751f\u6210\uff0c\u8ba1\u7b97Delaunay\u7f51\u683c\u6240\u6709\u7684\u4e09\u89d2\u5f62\u5916\u63a5\u5706\u7684\u5706\u5fc3\uff0c\u8fde\u63a5\u5404\u5706\u5fc3\u5f97\u5230\u7ef4\u8bfa\u56fe\u3002 Voronoi\u56fe\u4e2d\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u591a\u8fb9\u5f62\u7684\u8fb9\u6570\u53d6\u51b3\u4e8e\u8be5\u70b9\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u6570\u91cf\u3002\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684Voronoi\u56fe\u7684\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u76f8\u90bb\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u4e2d\u5fc3\u5c31\u662f\u591a\u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u8fde\u63a5\u6240\u6709\u4e0e\u8be5\u70b9\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u4e2d\u5fc3\uff0c\u6784\u6210\u7684\u591a\u8fb9\u5f62\u5373\u4e3a\u8be5\u70b9\u5728Voronoi\u56fe\u4e2d\u7684\u5f62\u72b6\u3002 6.3.\u7f51\u683c\u5256\u5206 \u7f51\u683c\u5256\u5206\u5206\u4e3a\u4e8c\u7ef4\u548c\u4e09\u7ef4\u7f51\u683c\u5256\u5206\uff0c\u7814\u7a76\u8be5\u8bdd\u9898\u7684\u8bba\u6587\u975e\u5e38\u4e30\u5bcc\uff0c\u63d0\u4f9b\u591a\u79cd\u65b9\u6cd5\uff0c\u800c\u4e0d\u540c\u7684\u51e0\u4f55\u5e93\u91c7\u7528\u5404\u81ea\u9009\u62e9\u7684\u65b9\u6848\u8fdb\u884c\u5b9e\u73b0\uff0c\u5f53\u7136\u76f8\u540c\u7684\u65b9\u6848\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u6548\u679c\u548c\u8d28\u91cf\u3002 \u5bf9\u4e8e\u4e8c\u7ef4\u8f6e\u5ed3\u7684\u7f51\u683c\u5256\u5206\uff0c\u6709\u8033\u5207\u6cd5\u3001Delaunay\u65b9\u6cd5\u3001BSP\u5206\u5272\u6cd5\u3001\u57fa\u4e8e\u51f8\u5206\u89e3\u7684\u5256\u5206\u6cd5\u7b49\u65b9\u6cd5\u3002 CGLib\u91c7\u7528\u8033\u5207\u6cd5\u5b9e\u73b0\u4e8c\u7ef4\u7f51\u683c\u5256\u5206\u7b97\u6cd5\uff0c\u652f\u6301\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\u7684\u5256\u5206\uff0c\u652f\u6301\u5e26\u6709\u6d1e\u53e3\u548c\u5d4c\u5957\u5c9b\u6d1e\u7684\u60c5\u51b5\u3002 CGLib\u540c\u65f6\u63d0\u4f9b\u51f8\u5206\u89e3\u8ba1\u7b97\uff0c\u53ef\u4ee5\u5728\u51f8\u5206\u89e3\u8ba1\u7b97\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u51f8\u8f6e\u5ed3\u7684\u7f51\u683c\u5316\u8ba1\u7b97\uff0c\u5f53\u7136\u8fd9\u66f4\u591a\u7684\u662f\u4e00\u79cd\u7406\u5ff5\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u7a7a\u95f4\u66f2\u9762\u7684\u7f51\u683c\u5316\uff0cCGLib\u91c7\u7528Nurbs\u66f2\u9762\u7f51\u683c\u5316\u7684\u601d\u8def\uff0c\u5373\u4ece\u53c2\u6570\u5316\u66f2\u9762\u4e2d\u63d0\u53d6\u53c2\u6570\u70b9\u6784\u6210\u51f8\u591a\u8fb9\u5f62\uff0c\u7136\u540e\u4f7f\u7528Delaunay\u5256\u5206\u7684\u65b9\u6cd5\u5f97\u5230\u8fd1\u4f3c\u8868\u8fbe\u7a7a\u95f4\u66f2\u9762\u7684\u65e0\u91cd\u53e0\u94fa\u6ee1\u7684\u4e09\u89d2\u5f62\u3002 Attention \u503c\u5f97\u4e00\u63d0\u7684\u662fBSP\u5206\u5272\u6cd5\u66f4\u4fa7\u91cd\u4e8e\u7406\u5ff5\uff0c\u5728\u7406\u8bba\u4e0a\u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u7f51\u683c\u5256\u5206\u65b9\u6cd5\uff0c\u4f46\u4f1a\u4ea7\u751f\u96f6\u788e\u7684\u4e09\u89d2\u9762\uff0c\u8fd9\u4e9b\u4e09\u89d2\u9762\u53ef\u80fd\u548c\u8f6e\u5ed3\u9876\u70b9\u6ca1\u6709\u8fde\u63a5\u5173\u7cfb\uff0c\u4e00\u822c\u5177\u4f53\u5b9e\u73b0\u4e2d\u4e0d\u4f1a\u91c7\u7528\u6b64\u65b9\u6cd5\u8fdb\u884c\u7f51\u683c\u5316\u8ba1\u7b97\u3002 // CGUtils.h static void TessellateBody(const Body& body, TriangleMesh& mesh); static void TessellateFace(const Face& face, TriangleMesh& mesh); static void TessellateFace(const Face& face, vector<Vector3f>& lstPoint, vector<unsigned>& lstTri, vector<unsigned>& edges, vector<Vector3f>& normals, vector<Vector2f>& uvs); static void TessellatePolygon(const vector<Vector3f>& lstPoint, const Vector3f& normal, TriangleMesh& mesh); // \u8f6e\u5ed3\u6811\uff08\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u8f6e\u5ed3\u96c6\u5408\uff09\u7f51\u683c\u5316 static void TessellatePolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, list<Vector3f>& lstPoints, list<unsigned int>& lstTris, list<unsigned int>& lstEdge, list<Vector3f>& lstNormal, list<Vector2f>& lstUv); static void TessellatePolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, TriangleMesh& mesh); 6.3.1.\u4e8c\u7ef4\u7f51\u683c\u5256\u5206 CGLib\u63d0\u4f9b\u7684\u7f51\u683c\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u7f51\u683c\u5256\u5206\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u201c\u6811\u72b6\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u201c\u7897\u72b6\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u201c\u679d\u5934\u7684\u679c\u5b50\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a 6.3.2.\u4e09\u7ef4\u7f51\u683c\u5256\u5206 CGLib\u63d0\u4f9b\u7684\u4e09\u7ef4\u7f51\u683c\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u5b9e\u4f53\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a \u56fe\uff1a\u5b9e\u4f53\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a 7.\u5e03\u5c14\u8fd0\u7b97 \u5e03\u5c14\u8fd0\u7b97\u548c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5bc6\u5207\u76f8\u5173\uff0c\u5206\u4e3a\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u548c\u4e09\u7ef4\u5e03\u5c14\u8fd0\u7b97\u3002\u7ecf\u8fc7\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5\u5f97\u5230 A\u2229B \u3001 A\u222aB \u3001 A-B \u548c B-A \u90e8\u5206\u3002 7.1.\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97 \u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5 \u4ee5\u70b9\u4e3a\u5355\u5143 \u6216 \u4ee5\u7ebf\u4e3a\u5355\u5143 \u8fdb\u884c\u8ba1\u7b97\u3002 CGLib\u63d0\u4f9b\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u8ba1\u7b97\u3002 // BooleanUtils.h // \u53d6\u53cd static void AntiPolygon(const list<Line>& polygon, list<Line>& result); static void AntiPolygon(const list<list<Line>>& polygon, list<list<Line>>& result); // \u4ea4\u96c6 static void Intersect(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); // \u5e76\u96c6 static void Union(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); // \u5dee\u96c6 static void Difference(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u5e03\u5c14\u8fd0\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u4ea4\u663e\u793a \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u5e76\u663e\u793a \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u51cf\u663e\u793a 7.2.\u4e09\u7ef4\u5e03\u5c14\u8fd0\u7b97 \u6839\u636e\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5206\u4e3a BRep\u5e03\u5c14\u8fd0\u7b97 \u3001 CSG\u5e03\u5c14\u8fd0\u7b97 \u3001 \u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 \u7b49\uff0c\u800c\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u53c8\u6709\u591a\u79cd\uff0c\u5982BSP\u65b9\u5f0f\u3001\u516b\u53c9\u6811\u65b9\u5f0f\u3002 CGLib\u63d0\u4f9bBRep\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5176\u4e2d\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u63d0\u4f9bBSP\u65b9\u5f0f\u548c\u516b\u53c9\u6811\u65b9\u5f0f\u3002 // CGUtils.h // BRep\u5e03\u5c14\u8fd0\u7b97 static void BodyIntersect(const Body& body1, const Body& body2, vector<Face>& facesInter); static void BodyUnion(const Body& body1, const Body& body2, vector<Face>& facesUnion); static void BodyDifference(const Body& body1, const Body& body2, vector<Face>& facesResult); // mesh BSP\u5e03\u5c14\u8fd0\u7b97 // \u6ce8\u610f\uff1a\u5efa\u8baeforceOperate\u4f20\u53c2\u503cfalse\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u9519\u629b\u5f02\u5e38 static void BodyIntersect(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& inter, bool forceOperate); static void BodyUnion(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshUnion, bool forceOperate); static void BodyDifference(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshDiff, bool forceOperate); // mesh \u516b\u53c9\u6811\u5e03\u5c14\u8fd0\u7b97 static void BodyIntersect_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& inter); static void BodyDiff_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshDiff); static void BodyUnion_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshUnion); Attention \u503c\u5f97\u6307\u51fa\u7684\u662fBSP\u65b9\u5f0f\u66f4\u591a\u7684\u662f\u7406\u5ff5\u65b9\u6cd5\uff0c\u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u4e00\u822c\u4e0d\u91c7\u7528\u6b64\u65b9\u5f0f\uff0cBSP\u65b9\u5f0f\u903b\u8f91\u7b80\u5355\u66b4\u529b\uff0c\u6548\u7387\u8f83\u4f4e\uff0c\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u96f6\u788e\u4e09\u89d2\u9762\uff0c\u4e14\u5bf9\u6570\u636e\u89c4\u8303\u6027\u8981\u6c42\u8f83\u9ad8\uff0c\u9002\u7528\u6027\u8f83\u5dee\uff0c\u5b9e\u9645\u5de5\u7a0b\u6570\u636e\u6765\u6e90\u591a\uff0c\u5f88\u96be\u4fdd\u8bc1\u5b8c\u5168\u63d0\u4f9b\u7b26\u5408\u5176\u8981\u6c42\u7684\u6570\u636e\uff0c\u4e0d\u5efa\u8bae\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u4e0d\u540c\u65b9\u5f0f\u7684\u5e03\u5c14\u8fd0\u7b97\u7b97\u6cd5\u5e76\u975e\u662f\u529f\u80fd\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u5373\u6709\u5176\u9002\u7528\u573a\u666f\u540c\u65f6\u4e0d\u53ef\u88ab\u53e6\u4e00\u79cd\u5b8c\u5168\u66ff\u4ee3\u3002\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u5e94\u7528\u573a\u666f\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\u65b9\u5f0f\u7684\u9009\u62e9\uff0c\u5982\u539f\u59cb\u5b9e\u4f53\u6570\u636e\u4e3a\u4e09\u89d2\u7f51\u683c\u7684\u65f6\u5019\u91c7\u7528\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\uff0c\u800c\u539f\u59cb\u5b9e\u4f53\u6570\u636e\u4e3aBRep\u5b9e\u4f53\u65f6\u91c7\u7528BRep\u5e03\u5c14\u8fd0\u7b97\u65b9\u5f0f\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1aBRep\u5e03\u5c14\u8fd0\u7b97\u6548\u679c \u56fe\uff1a\u516b\u53c9\u6811\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 \u56fe\uff1a\u66f2\u9762\u6784\u4ef6\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 7.3.\u4e0d\u89c4\u8303\u6570\u636e\u7684\u5904\u7406 \u5982\u4e0a\u8ff0\u7ae0\u8282\u63d0\u5230\u8fc7\uff0c\u4f5c\u4e3a\u57fa\u7840\u7684\u7b97\u6cd5\u5de5\u5177\uff0c\u5f88\u96be\u53bb\u9884\u6d4b\u8c03\u7528\u63a5\u53e3\u65f6\u4f20\u5165\u6570\u636e\u7684\u7279\u70b9\uff0c\u4e5f\u5f88\u96be\u53bb\u8fdb\u884c\u5b8c\u5168\u7406\u60f3\u5316\u7684\u9650\u5236\uff0c\u5f53\u7136\u5bf9\u4e8e\u9519\u8bef\u6570\u636e\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\u5f80\u5f80\u4e5f\u662f\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6848\uff0c\u4f46\u7531\u4e8e\u5b9e\u9645\u5de5\u7a0b\u7684\u590d\u6742\u6027\u548c\u4e2a\u6027\u5316\uff0c\u5b9e\u4f53\u6570\u636e\u5f80\u5f80\u53ef\u80fd\u4f1a \u4e0d\u89c4\u8303 \uff0c\u6ce8\u610f\u4e0d\u80fd\u7b80\u5355\u7684\u8d34\u4ee5 \u6570\u636e\u9519\u8bef \u7684\u6807\u7b7e\u4ece\u800c\u7b80\u5355\u5904\u7406\uff0c\u6bd4\u5982\u51e0\u4f55\u5b9e\u4f53\u5185\u90e8\u5d4c\u6709\u5185\u90e8\u51e0\u4f55\u5b9e\u4f53\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6b64\u7c7b\u6570\u636e\u7684\u517c\u5bb9\u5904\u7406\u4e5f\u662f\u5e03\u5c14\u8fd0\u7b97\u7b97\u6cd5\u9700\u8981\u8003\u8651\u7684\u8bdd\u9898\u3002 CGLib\u516b\u53c9\u6811\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u5bf9\u6570\u636e\u4e0d\u89c4\u8303\u60c5\u51b5\u8fdb\u884c\u7684\u5904\u7406\u548c\u65b9\u6848\u4f18\u5316\uff0c\u4f7f\u5176\u7ed3\u679c\u6570\u636e\u66f4\u8d34\u8fd1\u4e8e \u201c\u9884\u671f\u201d \u3002 \u56fe\uff1a\u4e0d\u89c4\u8303\u6570\u636e\u7684\u5904\u7406 8.\u5b9e\u4f53\u9020\u578b \u5b9e\u4f53\u9020\u578b\u662fCAD\u9886\u57df\u6838\u5fc3\u8bdd\u9898\uff0c\u53ef\u4ee5\u5206\u4e3a \u62c9\u4f38 \u3001 \u653e\u6837 \u3001 \u65cb\u8f6c \u3001 \u76f4\u7eb9 \u3001 \u878d\u5408 \u7b49\u591a\u79cd\u5b9e\u4f53\u7c7b\u578b\u7684\u6784\u9020\uff0c\u8fd8\u5305\u62ec\u5207\u5272\u3001\u5012\u89d2\u7b49\u5c40\u90e8\u9020\u578b\u4f18\u5316\u5185\u5bb9\uff0c\u7ed3\u5408\u4ee5\u5b9e\u4f53\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5\u6784\u9020\u590d\u6742\u591a\u6837\u7684\u5b9e\u4f53\u6548\u679c\u3002 CGLib\u6db5\u76d6\u4e3b\u8981\u9020\u578b\u8bae\u9898\uff0c\u5305\u62ec\u9020\u578b\u3001\u5c40\u90e8\u9020\u578b\u4f18\u5316\u3001\u5e03\u5c14\u8fd0\u7b97\u7b49\u3002 // CGUtils.h // \u62c9\u4f38\u4f53 static void GenerateHColumnMesh(float H, float B1, float B2, float T1, float T2, float S, float height, const Vector3f& insert, TriangleMesh& mesh); static void GenerateHColumn(float H, float B1, float B2, float T1, float T2, float S, float height, const Vector3f& insert, Body& body); static void GenerateCube(const vector<Vector3f>& sectionPts, const Vector3f& normal, float height, Body& cube); static void GenerateCube(const Vector3f& pt0, const Vector3f& pt1, const Vector3f& pt2, const Vector3f& pt3, const Vector3f& pt4, const Vector3f& pt5, const Vector3f& pt6, const Vector3f& pt7, Body& cube); static void GenerateCircleColumn(float radius, float height, const Vector3f& insert, Body& body); static void ExtrusionPolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, double height, Body& body); // \u653e\u6837 static void CreateLoftingSolid(const vector<Vector3f>& profile, const vector<Line>& path, Body& lofting); // \u5207\u5272 static bool Cut(const Body& body, const Face& cutFace, list<Body>& keepParts, list<Body>& cuttedParts); // \u5012\u5706\u89d2 static bool Rounding(const Line* top, const Line* bottom, double faceAngle, const Vector3f& normal, list<Line>& topRe, list<Line>& bottomRe); // \u5012\u89d2 static bool Chamfer(Body& body, const Line& targetBorder, float expand, bool rounding); // \u66f2\u9762\u9020\u578b // \u6b63\u5728\u5efa\u8bbe\u4e2d\uff0c\u63a5\u53e3\u5c1a\u672a\u5f00\u653e \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u5de5\u5b57\u94a2\u67f1\u548c\u76f4\u7eb9\u66f2\u9762\u5b9e\u4f53\u9020\u578b \u56fe\uff1a\u5de5\u5b57\u94a2\u67f1\u4e0e\u76f4\u7eb9\u66f2\u9762\u5b9e\u4f53\u7684\u4ea4\u96c6 \u56fe\uff1a\u5c40\u90e8\u9020\u578b-\u5012\u89d2 \u56fe\uff1a\u5c40\u90e8\u9020\u578b-\u5706\u89d2 9.\u66f2\u7ebf\u66f2\u9762 \u66f2\u7ebf\u66f2\u9762\u662f\u56fe\u5f62\u51e0\u4f55\u96be\u5ea6\u76f8\u5bf9\u8f83\u9ad8\u7684\u5206\u652f\uff0c\u6309\u53c2\u6570\u5316\u65b9\u5f0f\u7684\u4e0d\u540c\u5206\u4e3a\u591a\u9879\u5f0f\u66f2\u7ebf\u66f2\u9762\u3001\u8d1d\u585e\u5c14\u66f2\u7ebf\u66f2\u9762\u3001Nurbs\uff08\u975e\u5747\u5300\u6709\u7406B\u6837\u6761\uff09\u66f2\u7ebf\u66f2\u9762\u7b49\u3002 CGLib\u6839\u636e \u300aThe NURBS Book 2nd\u300b \u4e2d\u7684\u7406\u8bba\u548c\u7b97\u6cd5\u8fdb\u884c\u66f2\u7ebf\u66f2\u9762\u53ca\u76f8\u5173\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u4e3b\u8981\u63d0\u4f9bNurbs\u66f2\u7ebf\u66f2\u9762\u53ca\u76f8\u5173\u7b97\u6cd5\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\uff1b \u66f2\u7ebf\u66f2\u9762\u76f8\u5173\u63a5\u53e3\u5c1a\u672a\u5f00\u653e\uff0c\u5efa\u8bbe\u4e2d\u3002 \u56fe\uff1a\u66f2\u9762\u5b9e\u4f53\u9020\u578b\u548c\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 10.\u5176\u4ed6\u8bae\u9898 \u56fe\u5f62\u51e0\u4f55\u9886\u57df\u5177\u6709\u8303\u56f4\u5e7f\u3001\u4e13\u4e1a\u6df1\u7684\u7279\u70b9\uff0c\u6240\u652f\u6491\u7684\u9886\u57df\u540c\u6837\u5e7f\u6cdb\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u4f17\u591a\uff0c\u5728\u4e0a\u8ff0\u63d0\u5230\u7684\u4e3b\u8981\u8bdd\u9898\u4e4b\u5916\uff0c\u4ecd\u7136\u5b58\u5728\u4f17\u591a\u7684\u51e0\u4f55\u7b97\u6cd5\u5728\u652f\u6491\u591a\u6837\u573a\u666f\u7684\u5b9e\u73b0\u548c\u8fd0\u4f5c\u3002 \u4f5c\u8005\u5c06\u90e8\u5206\u7f57\u5217\u5982\u4e0b\uff0cCGLib\u5b9e\u73b0\u4e86\u5176\u4e2d\u90e8\u5206\u8bdd\u9898\uff0c *\u4f46\u76f8\u5173\u7684\u8bdd\u9898\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u8fd9\u4e9b\u51e0\u4f55\u5de5\u5177\u7b97\u6cd5\u662f\u56fe\u5f62\u51e0\u4f55\u5b66\u4e2d\u7684\u661f\u661f\u70b9\u70b9\uff0c\u4f7f\u5f97\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u661f\u6c49\u707f\u70c2 \u3002 10.1.\u7f51\u683c\u7b80\u5316 \u200c\u200c\u7f51\u683c\u7b80\u5316\uff08Mesh Simplification\uff09\u200c\u662f\u200c\u8ba1\u7b97\u673a\u79d1\u5b66\u6280\u672f\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u6307\u7684\u662f\u57fa\u4e8e\u67d0\u79cd\u8bef\u5dee\u5ea6\u91cf\uff0c\u7528\u7b80\u5316\u7684\u7f51\u683c\u66f2\u9762\u53d6\u4ee3\u539f\u59cb\u7f51\u683c\u66f2\u9762\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u901a\u8fc7\u4e00\u7cfb\u5217\u5c40\u90e8\u7684\u7b80\u5316\u64cd\u4f5c\uff0c\u5982\u200c\u9876\u70b9\u5220\u9664\u548c\u200c\u8fb9\u584c\u9677\uff0c\u6765\u5b9e\u73b0\u7f51\u683c\u7b80\u5316\u7684\u76ee\u7684\u3002\u200c \u56fe\uff1a\u5e26\u5706\u89d2\u7684\u5de5\u5b57\u94a2\u7f51\u683c\u7b80\u5316\u6548\u679c 10.2.\u8f6e\u5ed3\u63d0\u53d6 \u5e73\u9762\u6216\u7a7a\u95f4\u5e73\u9762\u4e2d\u5b58\u5728\u82e5\u5e72\u6761\u7ebf\uff0c\u4ece\u4e2d\u63d0\u53d6\u8f6e\u5ed3\u7684\u8fc7\u7a0b\u5373\u4e3a\u8f6e\u5ed3\u63d0\u53d6\u3002\u6839\u636e\u9700\u8981\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u6700\u5927\u5916\u56f4\u8f6e\u5ed3\u3001\u6240\u6709\u95ed\u5408\u8f6e\u5ed3\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06\u63d0\u53d6\u7684\u8f6e\u5ed3\u7ec4\u7ec7\u4e3a\u8f6e\u5ed3\u6811\uff0c\u65b9\u4fbf\u8fdb\u4e00\u6b65\u7684\u5e94\u7528\u3002 \u8f6e\u5ed3\u63d0\u53d6\u662f\u5939\u89d2\u6781\u503c\u8fd0\u7528\u7684\u7b97\u6cd5\uff0c\u4e0a\u8ff0\u7ae0\u8282\u4e2d\u7684\u51f8\u5305\u8ba1\u7b97\u4e5f\u662f\u5939\u89d2\u6781\u503c\u8fd0\u7528\u7684\u7b97\u6cd5\u3002 CGLib\u63d0\u4f9b\u7684\u8f6e\u5ed3\u63d0\u53d6\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h // \u63d0\u53d6\u8f6e\u5ed3\uff08\u6700\u5c0f\u5355\u5143\u8f6e\u5ed3\uff09 static void ExtractPolygon(const list<Line>& lines, const Vector3f& normal, list<list<Line>>& polygons, map<int, map<int, double>>& mapPolyIndex2NearIndex); // \u5c06\u8f6e\u5ed3\u96c6\u5408\u8f6c\u6362\u4e3a\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u8f6e\u5ed3\u6811 static void ConvertToPolygonTree(const list<list<Line>>& polygons, PolygonTree* polygonTree); static void ConvertToPolygonTree(list<list<list<Line>>::const_iterator>& polygons, PolygonTree* polygonTree); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u8f6e\u5ed3\u63d0\u53d6\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u201c\u53f6\u5b50\u201d\u8f6e\u5ed3\u7684\u63d0\u53d6 \u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u53ef\u80fd\u5b58\u5728 \u5927\u91cf\u7684\u7ebf\u6570\u636e \uff0c\u4e14\u53ef\u80fd\u5b58\u5728 \u7ebf\u91cd\u590d\u6216\u90e8\u5206\u91cd\u5408 \u7684\u60c5\u51b5\uff0cCGLib\u540c\u6837\u652f\u6301\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u8f6e\u5ed3\u7cbe\u786e\u548c\u5b8c\u6574\u7684\u63d0\u53d6\uff0c\u4ee5\u8f83\u9ad8\u7684\u6548\u7387\u5904\u7406\u3002\u4e0b\u56fe\u4e3a\u4ece2739\u6761\u7ebf\u6bb5\u4e2d\u63d0\u53d6\u8f6e\u5ed3\u7684\u6548\u679c\uff0c\u5b8c\u6574\u7684\u63d0\u53d6\u51fa49\u4e2a \u53f6\u5b50\u8f6e\u5ed3 \u3002 \u56fe\uff1a\u201c\u53f6\u5b50\u201d\u8f6e\u5ed3\u7684\u63d0\u53d6-2739\u6761\u7ebf\u6bb5\u4e2d\u63d0\u53d649\u4e2a\u8f6e\u5ed3 \u56fe\uff1a\u63d0\u53d6\u8f6e\u5ed3\u6811\u5e76\u663e\u793a 10.3.\u5916\u58f3\u63d0\u53d6 \u7a7a\u95f4\u6a21\u578b\u5f80\u5f80\u6bd4\u8f83\u590d\u6742\uff0c\u8bd5\u60f3\u4e00\u4e0b\uff0c\u57ce\u5e02\u4e2d\u6709\u82e5\u5e72\u57ce\u533a\uff0c\u6bcf\u4e2a\u57ce\u533a\u6709\u82e5\u5e72\u56ed\u533a\uff0c\u6bcf\u4e2a\u56ed\u533a\u6709\u82e5\u5e72\u697c\u5b87\uff0c\u6b64\u5916\u8fd8\u5b58\u5728\u5176\u4ed6\u5efa\u8bbe\u7269\u3001\u73af\u5883\u7269\uff0c\u8fd9\u5c06\u662f\u5de8\u5927\u7684\u4fe1\u606f\uff0c\u4e5f\u610f\u5473\u7740\u9700\u8981\u5de8\u5927\u7684\u6570\u636e\u624d\u80fd\u8868\u5f81\u57ce\u5e02\u4fe1\u606f\uff0c\u6b64\u5916\u8fd8\u6709\u6570\u91cf\u7ea7\u66f4\u5927\u7684\u52a8\u6001\u4fe1\u606f\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f80\u5f80\u9700\u8981\u5173\u6ce8\u6a21\u578b\u6216\u6784\u4ef6\u5916\u8868\u9762\uff0c\u751a\u81f3\u662f\u7c97\u7565\u7684\u5916\u8868\u9762\uff0c\u5982\u57ce\u5e02\u767d\u6a21\u6a21\u578b\u3001\u5730\u56fe\u73af\u5883\u6a21\u578b\u3001\u56ed\u533a\u5b8f\u89c2\u6a21\u578b\u3001\u5efa\u8bbe\u7269\u8868\u9762\u6a21\u578b\u7b49\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5916\u58f3\u63d0\u53d6\u7b97\u6cd5\u7684\u8c03\u7528\u3002 \u5916\u58f3\u63d0\u53d6\u7b97\u6cd5\u65b9\u6848\u8f83\u591a\uff0c\u5305\u62ec\u62d3\u6251\u94fe\u63a5\u3001\u5916\u58f3\u62bd\u6790\u3001\u53ef\u89c1\u6027\u5254\u9664\u7b49\u591a\u79cd\u65b9\u6848\u3002 \u56fe\uff1a\u5efa\u7b51\u7269\u5916\u58f3\u63d0\u53d6 10.4.\u51f8\u5206\u89e3 \u51f8\u5206\u89e3\u5206\u4e3a\u4e8c\u7ef4\u51f8\u5206\u89e3\u548c\u4e09\u7ef4\u51f8\u5206\u89e3\u3002\u50cf\u8bf8\u591a\u4e8c\u7ef4\u7b97\u6cd5\u7684\u63a8\u5e7f\u4e00\u6837\uff0c\u4e09\u7ef4\u51f8\u5206\u89e3\u4e5f\u53ef\u7531\u4e8c\u7ef4\u51f8\u5206\u89e3\u63a8\u5e7f\u800c\u5f97\u3002 \u7531\u591a\u79cd\u7b97\u6cd5\u65b9\u6848\u53ef\u4ee5\u5b9e\u73b0\u51f8\u5206\u89e3\uff0c\u5305\u62ec\u5939\u89d2\u6781\u503c\u6cd5\u3001BSP\u5206\u5272\u6cd5\u7b49\u3002 CGLib\u63d0\u4f9b\u7684\u51f8\u5206\u89e3\u63a5\u53e3\u548c\u8ba1\u7b97\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h // \u5bf9\u8f6e\u5ed3\u6811\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecompositionPolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, list<list<Line>>& lstConvexPolygon); // \u5bf9\u8f6e\u5ed3\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecomposition(const list<Line>& polygon, const Vector3f& normal, list<list<Line>>& lstConvexPoly); // \u5bf9Face(\u53ef\u542b\u6709\u6d1e\u53e3)\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecomposition(const Face& face, const Vector3f& normal, list<list<Line>>& lstConvexPoly); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u51f8\u5206\u89e3\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u8f6e\u5ed3\u51f8\u5206\u89e3\u6548\u679c 10.5.\u8f6e\u5ed3\u94fa\u88c5 CGLib\u63d0\u4f9b\u8f6e\u5ed3\u94fa\u88c5\u7b97\u6cd5\u63a5\u53e3\uff0c\u53ef\u5bf9\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\uff08\u53ef\u5d4c\u5957\u6d1e\u53e3\uff09\u3001\u8f6e\u5ed3\u6811\u8fdb\u884c\u94fa\u88c5\uff0c\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // Paving.h static void Run(const list<list<Line>>& polygon, double tileLen, double tileWid, double rotateAng, const Vector3f& start, list<list<Line>>& pavingTiles); \u56fe\uff1a\u8f6e\u5ed3\u94fa\u88c5\u6548\u679c \u56fe\uff1a\u8f6e\u5ed3\u94fa\u88c5\u6548\u679c\uff08\u7ebf\u6846\u6a21\u5f0f\uff09 10.6.\u8fb9\u7ebf\u63d0\u53d6 \u4e3a\u589e\u5f3a\u6a21\u578b\u663e\u793a\u6548\u679c\uff0c\u51f8\u663e\u5c42\u6b21\u611f\uff0c\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u8f6e\u5ed3\u8fb9\u7ebf\u4fe1\u606f\u7684\u663e\u793a\uff0c\u5f53\u539f\u59cb\u51e0\u4f55\u6570\u636e\u4e3a\u4e09\u89d2\u9762\u6570\u636e\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u81ea\u52a8\u8fdb\u884c\u8fb9\u7ebf\u63d0\u53d6\uff0c\u8fd9\u5c31\u9700\u8981\u8fb9\u7ebf\u63d0\u53d6\u7b97\u6cd5\u3002 \u8865\u5145\uff1a \u4e3a\u533a\u5206\u4e8e 10.2 \u8282\u4e2d\u7684 \u8f6e\u5ed3\u63d0\u53d6 \u7b97\u6cd5\uff0c\u672c\u8282\u91c7\u7528 \u8fb9\u7ebf\u63d0\u53d6 \u4f5c\u4e3a\u5f53\u524d\u7b97\u6cd5\u7684\u540d\u79f0\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u8fb9\u7ebf\u63d0\u53d6\u548c\u663e\u793a 10.7.\u5b9e\u4f8b\u5316\u8bc6\u522b \u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u5f80\u5f80\u9700\u8981\u8bc6\u522b\u63d0\u53d6 \u5f62\u4f53\u4e00\u81f4 \u7684\u5143\u7d20\uff0c\u5982\u5728\u56fe\u7eb8\u4e2d\u63d0\u53d6\u76f8\u540c\u7684\u5b9e\u4f8b\u6807\u8bc6\u4ee5\u8fdb\u884c\u6570\u91cf\u7edf\u8ba1\u548c\u9020\u4ef7\u8ba1\u7b97\u3001\u5728\u4e09\u7ef4\u6a21\u578b\u4e2d\u8bc6\u522b\u548c\u63d0\u53d6\u51e0\u4f55\u4e00\u81f4\u7684\u6784\u4ef6\u4ee5\u8fdb\u884c\u51e0\u4f55\u6570\u636e\u7684\u5171\u4eab\u7b49\u3002 \u8865\u5145\uff1a \u8fd9\u91cc\u7684 \u5f62\u4f53\u4e00\u81f4 \u5e7f\u4e49\u4e0a\u8fd8\u6db5\u76d6\u975e\u5747\u5300\u4eff\u5c04\u53d8\u6362\u5173\u7cfb\u7684\u5143\u7d20\uff0c\u5728\u5b9e\u9645\u7b97\u6cd5\u5b9e\u73b0\u4e2d\u4e3a\u7b80\u5316\u7b97\u6cd5\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u5f80\u5f80\u53ea\u5173\u6ce8\u5747\u5300\u7f29\u653e/\u65cb\u8f6c/\u5e73\u79fb\u4eff\u5c04\u53d8\u6362\u7684\u5143\u7d20\u7684 \u4e00\u81f4\u6027\u8bc6\u522b \u3002 10.8.\u78b0\u649e\u68c0\u67e5 \u78b0\u649e\u68c0\u67e5\u7b97\u6cd5\u53ef\u6839\u636e\u7a7a\u95f4\u57df\u89d2\u5ea6\u548c\u65f6\u95f4\u57df\u89d2\u5ea6\u8fdb\u884c\u5206\u7c7b\u3002 10.9.\u8def\u5f84\u89c4\u5212 \u8def\u5f84\u89c4\u5212\u662f\u8fd0\u52a8\u89c4\u5212\u7684\u4e3b\u8981\u7814\u7a76\u5185\u5bb9\u4e4b\u4e00\u3002\u8fd0\u52a8\u89c4\u5212\u7531\u8def\u5f84\u89c4\u5212\u548c\u8f68\u8ff9\u89c4\u5212\u7ec4\u6210\uff0c\u8fde\u63a5\u8d77\u70b9\u4f4d\u7f6e\u548c\u7ec8\u70b9\u4f4d\u7f6e\u7684\u5e8f\u5217\u70b9\u6216\u66f2\u7ebf\u79f0\u4e4b\u4e3a\u8def\u5f84\uff0c\u6784\u6210\u8def\u5f84\u7684\u7b56\u7565\u79f0\u4e4b\u4e3a\u8def\u5f84\u89c4\u5212\u3002 \u8def\u5f84\u89c4\u5212\u5728\u5f88\u591a\u9886\u57df\u90fd\u5177\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5728\u9ad8\u65b0\u79d1\u6280\u9886\u57df\u7684\u5e94\u7528\u6709\uff1a\u673a\u5668\u4eba\u7684\u81ea\u4e3b\u65e0\u78b0\u884c\u52a8\uff1b\u65e0\u4eba\u673a\u7684\u907f\u969c\u7a81\u9632\u98de\u884c\uff1b\u5de1\u822a\u5bfc\u5f39\u8eb2\u907f\u96f7\u8fbe\u641c\u7d22\u3001\u9632\u53cd\u5f39\u88ad\u51fb\u3001\u5b8c\u6210\u7a81\u9632\u7206\u7834\u4efb\u52a1\u7b49\u3002 10.10.\u70b9\u5408\u5e76 CGLib\u652f\u6301\u5bf9\u91cd\u5408\u70b9\u8fdb\u884c\u53bb\u91cd\u5408\u5e76\uff0c\u63a5\u53e3\u5982\u4e0b\uff0c // CurveTool.h static void mergePoints(const list<Vector3f>& points, list<Vector3f>& result); 10.11.\u5171\u7ebf\u5408\u5e76 \u5728\u56fe\u5f62\u51e0\u4f55\u4e2d\uff0c\u5171\u7ebf\u662f\u6307\u4e00\u7ec4\u70b9\u6216\u7ebf\u6bb5\u5728\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u60c5\u51b5\uff0c\u5305\u62ec\u5b8c\u5168\u91cd\u5408\u548c\u90e8\u5206\u91cd\u5408\u60c5\u51b5\u7684\u53bb\u91cd\u5408\u5e76\u5904\u7406\u3002\u4e00\u4e9b\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u7684\u524d\u5904\u7406\u8fc7\u7a0b\u9700\u8981\u8fdb\u884c\u5171\u7ebf\u5408\u5e76\uff0c\u5982 \u8f6e\u5ed3\u63d0\u53d6 \u3002 CGLib\u63d0\u4f9b\u5171\u7ebf\u5408\u5e76\u7b97\u6cd5\uff0c // CurveTool.h static void duplicateRemoval(const Vector3f& boundBoxMin, list<Line>& lines, bool ignoreDir); 10.12.\u6700\u77ed\u8ddd\u79bb\u70b9 \u5728\u4e00\u4e9b\u8ba1\u7b97\u4e2d\u5f80\u5f80\u9700\u8981\u5173\u6ce8\u548c\u76ee\u6807\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u4ee5\u8fdb\u4e00\u6b65\u8fdb\u884c\u5904\u7406\uff0cCGLib\u63d0\u4f9b\u4ece\u70b9\u96c6\u4e2d\u5bfb\u627e\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u7684\u8ba1\u7b97\u3002 CGLib\u63d0\u4f9b\u7684\u6700\u77ed\u8ddd\u79bb\u70b9\u8ba1\u7b97\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u6700\u77ed\u8ddd\u79bb\u70b9\u8ba1\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u6700\u77ed\u8ddd\u79bb\u70b9\u7684\u8bc6\u522b 11.\u7cbe\u5ea6\u548c\u8bef\u5dee \u6d6e\u70b9\u503c\u7684\u5b58\u50a8\u3001\u8fd0\u7b97\u90fd\u53ef\u80fd\u4f1a\u5e26\u6765\u7cbe\u5ea6\u635f\u5931\uff0c\u4e86\u89e3\u7cbe\u5ea6\u635f\u5931\u80cc\u540e\u7684\u673a\u5236\u539f\u56e0\u65b9\u4fbf\u6211\u4eec\u66f4\u597d\u7684\u4e86\u89e3\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u7cbe\u5ea6\u635f\u5931\u3001\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7cbe\u5ea6\u635f\u5931\u8f83\u5927\uff0c\u4ee5\u53ca\u601d\u8003\u600e\u4e48\u907f\u514d\u6216\u51cf\u5c11\u7cbe\u5ea6\u635f\u5931\u3002 \u5728CGLib\u4e2d\u5173\u6ce8\u7b97\u6cd5\u7684\u7cbe\u5ea6\u8bdd\u9898\uff0c\u7531\u8bf8\u591a\u63aa\u65bd\u8fdb\u884c\u4f18\u5316\u548c\u4fdd\u969c\u3002 \u8865\u5145\uff1a \u76f8\u5173\u5185\u5bb9\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u5173\u4e8efloat\u6d6e\u70b9\u503c\u4e8c\u8fdb\u5236\u5b58\u50a8\u548c\u8fd0\u7b97\u7cbe\u5ea6\u635f\u5931\u7684\u8bdd\u9898 12.\u663e\u793a \u4e3a\u4fbf\u4e8eCGLib\u5e93\u7684\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u540c\u65f6\u5f00\u53d1\u4e86 GL2DViewer \uff08\u57fa\u4e8eWPF\u5b9e\u73b0\uff09\u548c GLViewer \uff08\u57fa\u4e8eOpenGL\u5b9e\u73b0\uff09\u5de5\u5177\u8fdb\u884cCGLib\u5e93\u7684\u5e94\u7528\u548c\u53ef\u89c6\u5316\u5448\u73b0\u3002 \u63d0\u793a\uff1a GLViewer\u53ef\u4ee5\u514d\u8d39\u4f7f\u7528\uff1a github\u4e0b\u8f7d \u3002 \u56fe\uff1aGL2DViewer \u56fe\uff1aGLViewer \u56fe\uff1a\u57fa\u4e8eWinform GDI+\u7684\u7ed3\u6784\u529b\u5b66\u6c42\u89e3\u5668 13.\u5176\u4ed6 CGLib\u652f\u6301\u8de8\u5e73\u53f0\u3002 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41\u3002\u5fae\u4fe1\u516c\u4f17\u53f7\uff08 \u6587\u7ae0\u9876\u90e8 \uff09\u540e\u7eed\u4f1a\u66f4\u65b0\u76f8\u5173 \u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u6587\u7ae0 \uff0c\u6b22\u8fce\u4ea4\u6d41\u3002","title":"\u4e3b\u9875"},{"location":"#cglib","text":"","title":"CGLib"},{"location":"#1","text":"CGLib (Computational Geometry Library)\uff0c\u5168\u79f0\u201c\u8ba1\u7b97\u51e0\u4f55\u5e93\u201d\uff0cC++\u8bed\u8a00\u5b9e\u73b0\u7684\u53ef\u8de8\u5e73\u53f0\u8fd0\u884c\u7684\u51e0\u4f55\u5e93\uff0c\u8986\u76d6\u5e38\u89c1\u51e0\u4f55\u7b97\u6cd5\u5185\u5bb9\uff0c\u5305\u62ec\u57fa\u7840\u6570\u636e\u7ed3\u6784\u3001\u4eff\u5c04\u53d8\u6362\u3001\u5e38\u7528\u8ba1\u7b97\u5de5\u5177\u3001\u5173\u7cfb\u8ba1\u7b97\u3001\u7f51\u683c\u5316\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u5b9e\u4f53\u9020\u578b\u3001\u66f2\u7ebf\u66f2\u9762\u3001\u7cbe\u5ea6&\u8bef\u5dee\u3001\u5176\u4ed6\u5e38\u89c1\u8bae\u9898\u53ca\u663e\u793a\u76f8\u5173\u3002 \u53bb\u4e0b\u8f7dCGlib \u540c\u65f6\u63d0\u4f9bC#\u7248\u5c01\u88c5\u5e93\u3002\u4e0b\u56fe\u4e2d \u84dd\u8272\u90e8\u5206 \u4e3a\u5df2\u6709\u6216\u6b63\u5728\u5efa\u8bbe\u4e2d\u3002 \u56fe\uff1aCGLib\u5e94\u7528\u67b6\u6784 Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u91cd\u8981\u7684\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u4e8b\u9879\u3002 \u63d0\u793a/\u8865\u5145 \u84dd\u8272 \u65b9\u6846\u662f\u4e3a\u4e86\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u63d0\u793a\u6216\u8865\u5145\u7684\u9644\u52a0\u4fe1\u606f\u3002 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41 \u7f51\u7ad9\uff1a cglib.net \u516c\u4f17\u53f7\uff1a \u54c8\u5e02\u96ea\u82b1 \u90ae\u7bb1\uff1a heuwzl@163.com CSDN\uff1a \u54c8\u5e02\u96ea\u82b1 \uff08\u70b9\u51fb\u6253\u5f00\u94fe\u63a5\uff09 CGLib \u63d0\u4f9b\u7684\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u63a5\u53e3\u4e3b\u8981\u96c6\u4e2d\u5728\u5982\u4e0b\u5934\u6587\u4ef6\u4e2d CGUtils.h : \u5305\u542b\u5b9e\u4f53\u9020\u578b\u3001\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5316\u3001\u8f6e\u5ed3\u63d0\u53d6\u3001\u751f\u6210\u8f6e\u5ed3\u6811\u3001\u51f8\u5206\u5272\u3001\u4e8c\u4e09\u7ef4\u51f8\u5305\u3001\u7d27\u5bc6\u5916\u8f6e\u5ed3\u3001\u9762\u79ef\u3001\u4f53\u79ef\u8ba1\u7b97\uff0c\u53ca\u4e00\u7cfb\u5217\u5b9e\u4f53\u5173\u7cfb\u8ba1\u7b97\u7b49\u63a5\u53e3\uff1b CurveTool.h : \u5305\u542b\u8ddd\u79bb\u3001\u6295\u5f71\u3001\u6cd5\u5411\u8ba1\u7b97\u3001\u5207\u5272\u3001\u7ebf\u4ea4\u70b9\u3001\u70b9\u5408\u5e76\u3001\u7ebf\u53bb\u91cd\u7b49\u57fa\u7840\u63a5\u53e3\uff1b BooleanUtils.h : \u8f6e\u5ed3\u5e03\u5c14\u8fd0\u7b97\u76f8\u5173\u63a5\u53e3\uff0c\u5305\u62ec\u4ea4\u3001\u5e76\u3001\u5dee\u3001\u53d6\u53cd\u63a5\u53e3\uff1b Paving.h \u63d0\u4f9b\u8f6e\u5ed3\u94fa\u88c5\u7b97\u6cd5\u63a5\u53e3\uff1b","title":"1.\u5173\u4e8e"},{"location":"#11","text":"\u53f3\u624b\u6cd5\u5219 \u4eff\u5c04\u53d8\u6362 Z-Up\u548cY-Up BSP \u4e8c\u53c9\u6811 \u516b\u53c9\u6811 \u89d2\u5ea6\u548c\u5f27\u5ea6 \u534a\u8fb9\u7ed3\u6784 \u5206\u6cbb\u6cd5 \u9012\u63a8 \u589e\u91cf\u6784\u5efa \u8def\u5f84\u89c4\u5212 \u5939\u89d2\u6781\u503c ......","title":"1.1.\u57fa\u7840\u6982\u5ff5"},{"location":"#2","text":"","title":"2.\u57fa\u7840\u6570\u636e\u7ed3\u6784"},{"location":"#21","text":"\u5b9e\u4f53\u7ed3\u6784\u7684\u8868\u8fbe\u7531\u591a\u79cd\u65b9\u5f0f\uff0c\u5982\u5206\u89e3\u8868\u793a\u3001\u6784\u9020\u8868\u793a CSG \uff08Constructive Solid Geometry\uff09\u548c\u8fb9\u754c\u8868\u793a BRep \uff08Boundary Representation\uff09\u7b49\u3002 \u8865\u5145\uff1a \u5e38\u89c1\u7684\u5206\u89e3\u8868\u793a\u6cd5\u6709 \u56db\u53c9\u6811\u3001\u516b\u53c9\u6811\u3001BSP\u6811 \u7b49\u65b9\u5f0f\u3002 CSG \u65b9\u5f0f\u51fa\u73b0\u8f83\u65e9\uff0c\u540e\u6765\u51fa\u73b0\u4e86BRep\u666e\u53ca\u6bd4\u8f83\u5feb\uff0c\u73b0\u5728\u5927\u90e8\u5206\u9886\u5148\u7684\u51e0\u4f55\u5185\u6838 \uff08ACIS\u3001PS\u3001OCC\u7b49\uff09 \u91c7\u7528 BRep \u65b9\u5f0f\uff0c\u6709\u5173\u4e24\u8005\u7684\u4f18\u7f3a\u70b9\u548c\u9002\u7528\u573a\u666f\u6bd4\u8f83\u7684\u8ba8\u8bba\u5df2\u6709\u5f88\u591a\uff0c\u672c\u6587\u4e0d\u518d\u8d58\u8ff0\u3002 CGLib \u91c7\u7528 BRep \u65b9\u5f0f\u8868\u8fbe\u5b9e\u4f53\u7ed3\u6784\uff0c\u5b9e\u4f53\u76f8\u5173\u7684\u8ba1\u7b97\u5927\u591a\u4e5f\u57fa\u4e8e BRep \u7ed3\u6784\u8fdb\u884c\u3002 \u5f53\u524d\u5de5\u4e1a\u8f6f\u4ef6\u53d1\u5c55\u8f83\u5feb\uff0c\u6570\u5b57\u5316\u76f8\u5173\u5e73\u53f0\u548c\u8f6f\u4ef6\u767e\u5bb6\u4e89\u9e23\uff0c \u4e91\u5316 \u662f\u5f53\u524d\u5de5\u4e1a\u8f6f\u4ef6\u70ed\u95e8\u7684\u53d1\u5c55\u65b9\u5411\u4e4b\u4e00\uff0c\u800c\u6709\u5173\u91c7\u7528\u54ea\u79cd\u65b9\u5f0f\u8fdb\u884c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u4f3c\u4e4e\u8ba8\u8bba\u975e\u5e38\u591a\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u539f\u7406\u7279\u70b9\u548c\u5e94\u7528\u6846\u67b6\u903b\u8f91\uff0c\u518d\u591a\u7684\u8ba8\u8bba\u4e5f\u53ef\u80fd\u4e0d\u7740\u8981\u70b9\u3002 \u4e0d\u540c\u7684\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u7279\u70b9\u4e0d\u540c\uff0c\u5728\u51e0\u4f55\u5185\u6838\u8303\u7574\u5185\u5c24\u4e3a\u5173\u6ce8\uff0c\u6bd4\u5982\u5e03\u5c14\u8fd0\u7b97\u7684\u5b9e\u73b0\u65b9\u6848\u548c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5bc6\u5207\u76f8\u5173\uff0c\u6709CSG\u5e03\u5c14\u8fd0\u7b97\u3001BRep\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u7b49\u591a\u79cd\u65b9\u5f0f\uff1b\u518d\u6bd4\u5982\u5173\u7cfb\u5224\u65ad\u4e5f\u79bb\u4e0d\u5f00\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u70b9/\u7ebf/\u9762/\u5b9e\u4f53\u4e0e\u5b9e\u4f53\u5173\u7cfb\u7b49\u8ba1\u7b97\u3002\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u662f\u51e0\u4f55\u5e93\u57fa\u7840\u6570\u636e\u7ed3\u6784\u8868\u8fbe\u7684\u91cd\u8981\u90e8\u5206\uff0c\u4e5f\u662f\u51e0\u4f55\u5e93\u7684\u57fa\u7840\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u5e94\u7528\uff0c\u9700\u8981\u5728\u5e73\u53f0\u5c42\u8fdb\u884c\u5c01\u88c5\u548c\u5b9e\u73b0\uff0c\u63d0\u4f9b\u4fbf\u4e8e\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u652f\u6491\u5e94\u7528\u4fa7\u7684\u5f00\u53d1\u3002\u5e73\u53f0\u5c42\u4e00\u822c\u4f1a\u5c01\u88c5\u4e0d\u4fbf\u4e8e\u7406\u89e3\u7684\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\uff0c\u4ee5\u53c2\u6570\u5316\u6570\u636e\u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u7acb\u65b9\u4f53\u5177\u6709\u957f\u5bbd\u9ad8\uff08Length/Width/Height\uff09\u53c2\u6570\uff0c\u800c\u5706\u5177\u6709\u5706\u5fc3\uff08Center\uff09\u548c\u534a\u5f84\uff08Radius\uff09\u53c2\u6570\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5e73\u53f0\u548c\u5e94\u7528\u5c42\u4e0d\u5173\u7cfb\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u4e00\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff08\u5982\u62fe\u53d6\u9762\uff09\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6839\u636e\u9700\u6c42\u573a\u666f\u7279\u70b9\u8fdb\u884c\u51e0\u4f55\u5e93\u7684\u9009\u7528\uff0c\u4f5c\u4e3a\u51e0\u4f55\u5e93\u91cd\u8981\u57fa\u7840\uff0c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u4ecd\u7136\u662f\u91cd\u8981\u8003\u8651\u7684\u65b9\u9762\uff0c\u6bd5\u7adf\u5728\u5173\u6ce8\u8f7b\u91cf\u7ea7\u4f7f\u7528\u7684\u573a\u666f\uff0c\u6ca1\u6709\u591a\u5c11\u4eba\u613f\u610f\u5728CSG\u65b9\u5f0f\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u51e0\u4f55\u8ba1\u7b97\u3002 \u56fe\uff1a\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5728\u51e0\u4f55\u5e93\u5e94\u7528\u4f53\u7cfb\u4e2d\u7684\u4f4d\u7f6e","title":"2.1.\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe"},{"location":"#22","text":"\u57fa\u7840\u6570\u636e\u7ed3\u6784\u8fd8\u5305\u62ec\u5411\u91cf\u3001\u77e9\u9635\u3001\u70b9\u3001\u7ebf\u3001\u9762\u3001\u5e73\u9762\u7b49\u4ee5\u53ca\u76f8\u5173\u57fa\u7840\u65b9\u6cd5\uff0c\u5982\u5411\u91cf\u70b9\u4e58/\u53c9\u4e58\u3001\u77e9\u9635\u8fd0\u7b97\u7b49\u3002 \u8fd9\u91cc\u5199\u4e00\u53e5\u4ee4\u4f5c\u8005\u611f\u89e6\u9887\u6df1\u7684\u8bdd\uff1a \u6ca1\u6709\u4eba\u624d\uff0c\u4e00\u5207\u8c0b\u7565\u5747\u662f\u7a7a\u8c08\uff1b\u8131\u79bb\u4eba\u624d\u7684\u8c0b\u7565\u53ef\u80fd\u88ab\u79f0\u4e3a\u9634\u8c0b\u8be1\u8ba1","title":"2.2.\u5176\u4ed6"},{"location":"#3","text":"CGLib\u652f\u6301\u4eff\u5c04\u53d8\u6362\u77e9\u9635\u4e2d\u7684\u7f29\u653e\u3001\u65cb\u8f6c\u3001\u5e73\u79fb\u4ee5\u53ca\u975e\u5747\u5300\u53d8\u6362\uff0c\u5f53\u7136\u4e5f\u652f\u6301\u5de6/\u53f3\u624b\u5750\u6807\u7cfb\u4e4b\u95f4\u7684\u8f6c\u6362\u3001Y-Up/Z-Up\u8f6c\u6362\u3001\u955c\u50cf\u8f6c\u6362\u7b49\uff0c\u8fd9\u5e76\u4e0d\u662f\u4ec0\u4e48\u9ad8\u6df1\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u77e9\u9635\u5e76\u6ca1\u6709\u548c\u5de6\u624b/\u53f3\u624b\u5750\u6807\u7cfb\u6982\u5ff5\u7ed1\u5b9a\uff0c\u4ed6\u662f\u7a7a\u95f4\u59ff\u6001\u53d8\u6362\u7684\u6570\u5b66\u8868\u8fbe\u3002","title":"3.\u4eff\u5c04\u53d8\u6362"},{"location":"#4","text":"","title":"4.\u5e38\u7528\u8ba1\u7b97\u5de5\u5177"},{"location":"#41","text":"CGLib\u63d0\u4f9b\u7ebf\u6bb5\uff08Line\uff09\u3001\u5706\u5f27\u7ebf\uff08Arc\uff09\u3001\u692d\u5706\u5f27\u7ebf\uff08EllipseArc\uff09\u7684\u957f\u5ea6\u8ba1\u7b97\u3002\u6b64\u5916\u8fd8\u63d0\u4f9bNurbs\u66f2\u7ebf\u957f\u5ea6\u8ba1\u7b97\uff0c\u8fd9\u5c06\u5728\u66f2\u7ebf\u66f2\u9762\u7ae0\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u3002","title":"4.1.\u957f\u5ea6"},{"location":"#42","text":"CGLib\u63d0\u4f9b\u9762\u7684\u9762\u79ef\u8ba1\u7b97\uff0c\u901a\u8fc7\u516c\u5f0f\u7684\u63a8\u5bfc\u7b80\u5316\u8ba1\u7b97\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u4f9b\u4e00\u79cd\u7cbe\u5ea6\u8f83\u9ad8\u7684\u9762\u79ef\u8ba1\u7b97\u7b97\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\u662f\u63d0\u4f9b\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u63a5\u53e3\uff0c\u5f53\u8f6e\u5ed3\u6216\u9762\u542b\u6709\u975e\u7ebf\u6bb5\u8fb9\uff08Edge\uff09\u65f6\uff0c\u9700\u8981\u5c06\u5176\u79bb\u6563\u4e3a\u7ebf\u6bb5\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5bf9\u4e8e\u6b64\u7c7b\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u5177\u6709\u8bef\u5dee\uff0c\u8bef\u5dee\u4e3b\u8981\u6765\u6e90\u4e8e\u66f2\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u7ebf\u6bb5\u8fc7\u7a0b\u3002CGLib\u63d0\u4f9b\u66f2\u7ebf\u79bb\u6563\u63a5\u53e3\u3002 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u4e00\u79cd\u8bef\u5dee\u8f83\u5c0f\u7684\u8f6e\u5ed3\u9762\u79ef\u8ba1\u7b97\u7b97\u6cd5 CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static double GetArea(const list<Line>& polygon, const Transform& trsW2L); static void GetTransformL2W(const list<Line>& polygon, Transform& trsL2W); // (\u63a8\u8350\u4f7f\u7528) CurveTool.h \u5728\u8ba1\u7b97\u6cd5\u5411\u65f6\u540c\u6837\u8fd4\u56de\u9762\u79ef static Vector3f GetNormal(const list<Line>& polygon, double& area);","title":"4.2.\u9762\u79ef"},{"location":"#43","text":"CGLib\u63d0\u4f9b\u5b9e\u4f53\u4f53\u79ef\u8ba1\u7b97\uff0c\u901a\u8fc7\u516c\u5f0f\u7684\u63a8\u5bfc\u7b80\u5316\u8ba1\u7b97\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u4f9b\u7cbe\u5ea6\u8f83\u9ad8\u7684\u8ba1\u7b97\u7ed3\u679c\u3002\u7531\u4e8e\u4f53\u79ef\u8ba1\u7b97\u4f9d\u8d56\u5b9e\u4f53\u9762\u7684\u9762\u79ef\u8ba1\u7b97\uff0c\u5b9e\u4f53\u9762\u7684\u9762\u79ef\u8ba1\u7b97\u5177\u5907\u4e0a\u8ff0\u9762\u79ef\u8ba1\u7b97\u7684\u7279\u70b9\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u957f\u5ea6\u3001\u9762\u79ef\u3001\u4f53\u79ef\u8ba1\u7b97\u7684\u601d\u60f3\u7406\u5ff5\u4e3b\u8981\u6765\u6e90\u4e8e\u5fae\u79ef\u5206\uff0c\u5fae\u5206\u548c\u79ef\u5206\u7684\u601d\u60f3\uff0c\u7136\u540e\u5e94\u7528\u4e8e\u7b97\u6cd5\u4e2d\u3002 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u51e0\u4f55\u7b97\u6cd5\u7cfb\u5217\uff1a\u7a7a\u95f4\u5b9e\u4f53\u4f53\u79ef\u8ba1\u7b97\u516c\u5f0f\u63a8\u5bfc CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static double GetVolume(const Body& body);","title":"4.3.\u4f53\u79ef"},{"location":"#44","text":"CGLib\u63d0\u4f9b\u8f6e\u5ed3\u548c\u9762\u7684\u6cd5\u5411\u8ba1\u7b97\uff0c\u7ed3\u5408\u52a0\u6743\u5e73\u5747\u7684\u601d\u60f3\u63d0\u4f9b\u4e00\u79cd\u51c6\u786e\u4e14\u8bef\u5dee\u8f83\u5c0f\u7684\u6cd5\u5411\u8ba1\u7b97\u63a5\u53e3\u3002\u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\uff0c\u8f6e\u5ed3\u5750\u6807\u53ef\u80fd\u5f88\u5927\uff0c\u53ef\u80fd\u542b\u6709\u5fae\u5c0f\u7684\u8fb9\uff0c\u53ef\u80fd\u5177\u6709\u6574\u4f53\u5e73\u9762\u4f46\u5c40\u90e8\u7a7a\u95f4\u7684\u7279\u70b9......\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u8bef\u5dee\uff0c\u5728\u7b97\u6cd5\u5b9e\u73b0\u4e2d\u9700\u8981\u517c\u5bb9\u8003\u8651\u8fd9\u4e9b\u573a\u666f\uff0c\u56e0\u4e3a\u4f60\u65e0\u6cd5\u9884\u6d4b\u8c03\u7528\u63a5\u53e3\u4f20\u5165\u7684\u6570\u636e\uff0c\u4e5f\u5f88\u96be\u53bb\u8fdb\u884c\u9650\u5236\u3002 \u56fe\uff1a\u52a0\u6743\u5e73\u5747\u793a\u610f \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u4e00\u79cd\u8bef\u5dee\u8f83\u5c0f\u7684\u8ba1\u7b97\u8f6e\u5ed3\u6cd5\u5411\u7684\u65b9\u6cd5 CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CurveTool.h \u8ba1\u7b97\u6cd5\u5411\u540c\u65f6\u8fd4\u56de\u9762\u79ef static Vector3f GetNormal(const list<Line>& polygon, double& area);","title":"4.4.\u6cd5\u5411"},{"location":"#45","text":"CGLib\u66f2\u7387\u8ba1\u7b97\u8fd8\u4e0d\u591f\u5b8c\u5584\uff0c\u9700\u8981\u53bb\u5efa\u8bbe\u3002","title":"4.5.\u66f2\u7387"},{"location":"#46","text":"\u5305\u56f4\u76d2\u662f\u4ece\u4e8b\u56fe\u5f62\u51e0\u4f55\u76f8\u5173\u5f00\u53d1\u548c\u5e94\u7528\u5f00\u53d1\u8005\u975e\u5e38\u719f\u6089\u7684\u6982\u5ff5\uff0c\u5305\u62ecAABB\u5305\u56f4\u76d2\u3001OBB\u5305\u56f4\u76d2\uff0c\u5e7f\u4e49\u6765\u8bf4\u8fd8\u5305\u62ec\u5305\u56f4\u7403\u3001\u51f8\u5305\u3001\u6700\u5c0f\u5916\u63a5\u8f6e\u5ed3\u7b49\u3002 \u672c\u8282\u53ea\u5173\u6ce8\u4e0e\u4fa0\u4e49\u7684\u5305\u56f4\u76d2\u6982\u5ff5\uff0c\u6709\u5173\u5176\u4ed6\u6982\u5ff5\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u540e\u7eed\u7ae0\u8282\u6216\u53c2\u8003\u76f8\u5173\u8d44\u6599\u3002 CGLib\u63d0\u4f9bAABB\u5305\u56f4\u76d2\u7684\u8ba1\u7b97\u3002 \u56fe\uff1aAABB\u548cOBB\u5305\u56f4\u76d2\u7684\u533a\u522b CGLib\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff0c // CGUtils.h static void getBoundingBox(const vector<pair<Vector3f, Vector3f>>& mapMeshId2BoundBox, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const list<Vector3f>& lstVertex, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const list<Line>& lstLine, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const Body& body, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox(const TriangleMesh* mesh, const Transform* trs, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox_IdentTrs(const TriangleMesh* mesh, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax); static void getBoundingBox_NotIdentTrs(const TriangleMesh* mesh, const Transform* trs, Vector3f& boundingBoxMin, Vector3f& boundingBoxMax);","title":"4.6.\u5305\u56f4\u76d2"},{"location":"#47","text":"\u51f8\u5305\u5305\u62ec\u4e8c\u7ef4\u51f8\u5305\u548c\u4e09\u7ef4\u51f8\u5305\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684\u6570\u636e\uff0c\u5176\u51f8\u5305\u8ba1\u7b97\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u65e0\u8bba\u91c7\u7528\u54ea\u79cd\u7b97\u6cd5\uff0c\u4e5f\u65e0\u8bba\u4ece\u6570\u636e\u7684\u4ec0\u4e48\u4f4d\u7f6e\u5f00\u59cb\u8ba1\u7b97\uff0c\u8fd9\u548cDelaunay\u4e09\u89d2\u5256\u5206\u7b97\u6cd5\u6709\u7c7b\u4f3c\u7684\u7279\u70b9\u3002 CGLib\u63d0\u4f9b\u4e8c\u7ef4\u51f8\u5305\u548c\u4e09\u7ef4\u51f8\u5305\u7684\u8ba1\u7b97\uff0c\u91c7\u7528\u589e\u91cf\u6784\u5efa\u7684\u601d\u60f3\u3002","title":"4.7.\u51f8\u5305"},{"location":"#471","text":"CGLib\u63d0\u4f9b\u7684\u4e8c\u7ef4\u51f8\u5305\u8ba1\u7b97\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h static bool CalConvexHull(const list<Vector3f>& lstVertex, const Vector3f& normal, list<Line>& convexHull); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u51f8\u5305\u8ba1\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u4e00\u6bb5\u8f6f\u7ba1\u5e73\u9762\u6295\u5f71\u7684\u7684\u51f8\u5305 \u56fe\uff1a\u5c0f\u6811\u548c\u5c0f\u8349\u7684\u51f8\u5305-\u805a\u5149\u706f\u4e0b\u7684\u6548\u679c","title":"4.7.1.\u4e8c\u7ef4\u51f8\u5305"},{"location":"#472","text":"CGLib\u63d0\u4f9b\u7684\u4e09\u7ef4\u51f8\u5305\u8ba1\u7b97\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h static bool Cal3DConvexHull(const list<Vector3f>& lstVertex, Body& convexHull); \u56fe\uff1a\u589e\u91cf\u6784\u5efa\u793a\u610f \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u7a7a\u95f4\u70b9\u96c6\u7684\u4e09\u7ef4\u51f8\u5305\u6548\u679c\uff08\u5de6\u4e3a\u7ebf\u6846\u6a21\u5f0f\uff0c\u53f3\u4e3a\u5b9e\u4f53\u6a21\u5f0f\uff09 \u8865\u5145\uff1a \u7b97\u6cd5\u6d41\u7a0b\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u51e0\u4f55\u7b97\u6cd5\u7cfb\u5217-\u4e09\u7ef4\u51f8\u5305","title":"4.7.2.\u4e09\u7ef4\u51f8\u5305"},{"location":"#48","text":"CGLib\u652f\u6301\u8ba1\u7b97\u70b9\u96c6\u3001\u56fe\u50cf\u7684\u7d27\u6025\u5916\u8f6e\u5ed3\uff0c\u63d0\u4f9b\u7684\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGLib.h static bool CalMinHull(const list<Vector3f>& lstVertex, const Vector3f& normal, list<Line>& hull); \u56fe\u7247\u56fe\u50cf\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3\u8ba1\u7b97\u53ef\u53c2\u8003\u7ed3\u5408OpenCV\u5e93\u63d0\u53d6\u56fe\u50cf\u7684\u8f6e\u5ed3\u7ebf\u96c6\u5408\uff0c\u4e4b\u540e\u518d\u8c03\u7528CGlib\u63a5\u53e3\u5b9e\u73b0\u3002 int getContoursFromImage(const cv::String& folder, const cv::String& fileName, std::vector<std::vector<cv::Point>>& contours, cv::Mat& srcImage) { string filePath = folder + \"/\" + fileName; srcImage = cv::imread(filePath, cv::ImreadModes::IMREAD_UNCHANGED); //\u6761\u4ef6\u8bed\u53e5\u68c0\u67e5 srcImage \u56fe\u50cf\u662f\u5426\u4e3a\u7a7a\uff08\u5373\u56fe\u50cf\u662f\u5426\u672a\u6210\u529f\u52a0\u8f7d\uff09 if (srcImage.empty()) { printf(\"could not load image ...\"); return -1; } //cv::imshow(\"\u8f93\u5165\u56fe\u50cf\", srcImage); double thresh = 85; // \u63d0\u53d6\u8f6e\u5ed3 cv::Mat image = cv::imread(filePath, cv::IMREAD_GRAYSCALE); // \u8bfb\u53d6\u7070\u5ea6\u56fe\u50cf cv::Mat binaryImage; cv::threshold(image, binaryImage, thresh/*100*/, 255, cv::THRESH_BINARY); // \u4e8c\u503c\u5316\u5206\u5272\uff0c\u5927\u4e8e\u9608\u503c\u4e3a255\uff0c\u5c0f\u4e8e\u9608\u503c\u4e3a0 std::vector<cv::Vec4i> hierarchy; // \u904d\u5386\u8f6e\u5ed3\u5e76\u7ed8\u5236 cv::findContours(binaryImage, contours, hierarchy, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE); return 0; } \u63d0\u793a/\u8865\u5145 CGViewer \u76f4\u63a5\u63d0\u4f9b\u56fe\u7247\u7ed8\u5236\u548c\u5916\u8f6e\u5ed3\u63d0\u53d6\u529f\u80fd\uff0c\u5e76\u53ef\u5c06\u63d0\u53d6\u7684\u5916\u8f6e\u5ed3\u7ed8\u5236\u5230\u56fe\u7247\u4e2d\uff0c\u6548\u679c\u5982\u4e0b\u56fe\uff0c\u53ef\u514d\u8d39\u4f7f\u7528\u3002 \u56fe\uff1a\u7ebf\u96c6\u5408\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3 \u56fe\uff1a\u5c0f\u5973\u5b69\u56fe\u7247\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3 \u56fe\uff1a\u73ab\u7470\u82b1\u56fe\u7247\u7684\u7d27\u5bc6\u5916\u8f6e\u5ed3","title":"4.8.\u7d27\u5bc6\u5916\u8f6e\u5ed3"},{"location":"#49tessellate","text":"Tessellate\u8fd9\u4e00\u8bcd\u6c47\u5728\u6570\u5b66\u4e2d,\u7279\u522b\u662f\u5728\u51e0\u4f55\u5b66\u9886\u57df,\u5177\u6709\u72ec\u7279\u7684\u542b\u4e49\u3002\u5305\u62ec\u7ebf\u7684\u79bb\u6563\u3001\u9762\u7684\u79bb\u6563\u3001\u5b9e\u4f53\u7684\u79bb\u6563\u7b49\u6982\u5ff5\u3002 \u4f60\u53ef\u80fd\u5df2\u7ecf\u660e\u767d\u4e86\uff0c Important \u7ebf\u7684\u79bb\u6563\u662f\u5c06\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u82e5\u5e72\u4e2a\u7ebf\u6bb5\uff1b \u9762\u7684\u79bb\u6563\u662f\u9762\u7684\u7f51\u683c\u5316\uff08\u4e09\u89d2\u5316/\u56db\u8fb9\u5f62\u5316/\u51f8\u5206\u89e3\u7b49\uff09\uff1b \u800c\u5b9e\u4f53\u7684\u79bb\u6563\u5219\u662f\u5b9e\u4f53\u7684\u79bb\u6563\uff0c\u5c06\u5b9e\u4f53\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u4e00\u79cd\u6216\u591a\u79cd\u5f62\u72b6\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e0d\u540c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\uff0c\u5b9e\u4f53\u7684\u79bb\u6563\u662f\u4e0d\u540c\u7684\uff0c\u5bf9\u4e8eBRep\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b9e\u4f53\u7684\u79bb\u6563\u548c\u9762\u7684\u79bb\u6563\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\u3002\u5178\u578b\u7684\u5b9e\u4f53\u79bb\u6563\u8868\u73b0\u4e3a\u5b9e\u4f53\u7684\u7f51\u683c\u5316\u3001\u5b9e\u4f53\u7684\u51f8\u5206\u89e3\u7b49\u3002 CGLib\u63d0\u4f9b\u5982\u4e0b\u79bb\u6563\u8ba1\u7b97\uff1a \u5c06\u7ebf\u79bb\u6563\u4e3a\u8fd1\u4f3c\u8868\u8fbe\u7684\u82e5\u5e72\u6761\u7ebf\u6bb5\uff1b \u5c06\u9762\u79bb\u6563\u4e3a\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u67d0\u79cd\u5f62\u72b6\uff0c\u5305\u62ec\u9762\u7684\u7f51\u683c\u5316\u6216\u9762\u7684\u51f8\u5206\u89e3\uff1b \u5c06\u5b9e\u4f53\u79bb\u6563\u4e3a\u65e0\u91cd\u53e0\u7684\u94fa\u6ee1\u4e09\u89d2\u5f62\uff0c\u5373\u5b9e\u4f53\u7684\u7f51\u683c\u5316\uff1b","title":"4.9.\u79bb\u6563\uff08Tessellate\uff09"},{"location":"#410uv","text":"UV\u8ba1\u7b97\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u91cd\u8981\u8bdd\u9898\u4e4b\u4e00\uff0c\u66f2\u7ebf/\u66f2\u9762\u7684\u53c2\u6570\u5316\u8868\u8fbe\u3001\u7eb9\u7406\u8d34\u56fe\u7684\u9576\u8d34\u7b49\u5747\u4e0e\u6b64\u76f8\u5173\u3002 CGLib\u7684UV\u8ba1\u7b97\u5c1a\u4e0d\u591f\u5b8c\u5584\uff0c\u6b63\u5728\u5efa\u8bbe\u4e2d\u3002","title":"4.10.UV\u8ba1\u7b97"},{"location":"#411","text":"\u5f62\u5fc3\u5373\u51e0\u4f55\u4e2d\u5fc3\uff0c\u4f5c\u4e3a\u51e0\u4f55\u7279\u5f81\u4e4b\u4e00\uff0c\u4e5f\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u5e38\u89c1\u7684\u6982\u5ff5\u3002\u5305\u62ec\u7ebf\u7684\u4e2d\u5fc3\u3001\u9762\u7684\u5f62\u5fc3\u3001\u5b9e\u4f53\u7684\u51e0\u4f55\u4e2d\u5fc3\u7b49\uff0c\u6b64\u5916\u91cd\u5fc3\u3001\u60ef\u6027\u77e9\u7b49\u6982\u5ff5\u4e0e\u6b64\u5bc6\u5207\u76f8\u5173\u3002","title":"4.11.\u5f62\u5fc3"},{"location":"#5","text":"\u5173\u7cfb\u8ba1\u7b97\u662f\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u91cd\u8981\u8bdd\u9898\uff0c\u5305\u62ec\u70b9\u3001\u7ebf\u3001\u9762\u3001\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6db5\u76d6\u5305\u542b\u5173\u7cfb\u3001\u76f8\u4ea4\u5173\u7cfb\u3001\u6700\u8fd1\u8ddd\u79bb\u3001\u6295\u5f71\u4ee5\u53ca\u884d\u751f\u7684\u5207\u5272\u7b49\u76f8\u5173\u5185\u5bb9\u3002 CGLib\u57fa\u672c\u5b8c\u6574\u7684\u63d0\u4f9b\u4e0a\u8ff0\u5927\u90e8\u5206\u8ba1\u7b97\uff0c\u5305\u62ec\u5173\u7cfb\u8ba1\u7b97\u3001\u5207\u5272\u3001\u5e03\u5c14\u8fd0\u7b97\u7b49\u76f8\u5173\u5185\u5bb9\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u3001 GLViewer \u4e2d\u8c03\u7528CGLib\u751f\u6210\u5e76\u663e\u793a\u7684\u3002 Important \u5173\u7cfb\u8ba1\u7b97 \u4e3a\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u57fa\u7840\u5de5\u5177\u7b97\u6cd5\uff0c\u662f\u91cd\u8981\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u5f88\u591a\u9ad8\u7ea7\u7b97\u6cd5\u6216\u5e94\u7528\u7b97\u6cd5\u5747\u9700\u8981\u4f9d\u8d56\u8fd9\u4e9b\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u5b9e\u73b0\u3002 \u56fe\uff1a\u7ebf\u5207\u5272\u8f6e\u5ed3 \u56fe\uff1a\u9762\u5207\u5272\u5b9e\u4f53 \u56fe\uff1a\u9762\u5207\u5272\u5b9e\u4f53 CGLib\u63d0\u4f9b\u7684\u90e8\u5206\u5173\u7cfb\u8ba1\u7b97\u51fd\u6570\u63a5\u53e3\u5982\u4e0b\uff0c\u5176\u4e2d\u5e03\u5c14\u8fd0\u7b97\u7b49\u4e3a\u5355\u72ec\u7684\u8bdd\u9898\u5185\u5bb9\uff0c\u76f8\u5173\u63a5\u53e3\u672a\u5217\u51fa\uff0c\u8be6\u89c1\u5bf9\u5e94\u7ae0\u8282\u5185\u5bb9\u3002 // \u6c42\u7ebf\u4e0e\u8f6e\u5ed3\u4ea4\u70b9 void LineIntersectPolygon(const Line& lineOri, _Iter first, _Iter last, bool recordBorder, const Face* faceTarget, vector<PointBorderData>& lstInterPt); // \u6c42\u7ebf\u4e0e\u9762\u4ea4\u70b9 void LineIntersectFace(const Line& line, const Face& faceTarget, bool recordBorder, vector<PointBorderData>& lstInterPt); // \u70b9\u4e0e\u7ebf\u5173\u7cfb\u5224\u65ad bool IsOnLine(const Vector3d& pt, const Vector3d& pt1, const Vector3d& pt2, float tolerance = 1e-3, float tolerance2 = 1e-4); // \u70b9\u4e0e\u4e09\u89d2\u5173\u7cfb\u5224\u65ad PointInTriangleType InTriangle(const Vector3f& pt0, const Vector3f& pt1, const Vector3f& pt2, const Vector3f& ptTarget); // \u70b9\u4e0e\u9762\u5173\u7cfb\u5224\u65ad PointInPolygonResult IsPointInFace(const Vector3f& point, const Face& face, bool needBoxDetermine = true); // \u70b9\u4e0e\u8f6e\u5ed3\u5173\u7cfb\u5224\u65ad PointInPolygonResult IsPointInPolygon(const Vector3f& point, const list<Line>& polygon, bool needBoxDetermine = true); // \u70b9\u4e0e\u7a7a\u95f4\u76d2\u5173\u7cfb\u5224\u65ad bool IsPointInBox(const Vector3f& point, const Vector3f& boundingBoxMin, const Vector3f& boundingBoxMax); // \u70b9\u4e0e\u5b9e\u4f53\u5173\u7cfb\u5224\u65ad bool IsPointInBody(const Vector3f& point, const Body& body); // \u7a7a\u95f4\u9762\u662f\u5426\u5207\u5272\u4e09\u89d2 bool PlaneCutTriangle(float a, float b, float c, float d, const TriangleData& tri, vector<TriangleData>& resultIn, vector<TriangleData>& resultOut); // \u7a7a\u95f4\u9762\u662f\u5426\u5207\u5272\u7ebf int PlaneCutLine(const Vector3f& vert1, const Vector3f& vert2, float a, float b, float c, float d, Vector3f& inter, bool& node1Out); // \u5b9e\u4f53\u4e0e\u9762\u662f\u5426\u76f8\u4ea4 bool IsFaceCutted(const Body& body, const Face& faceTarget); // \u5c04\u7ebf\u662f\u5426\u4e0e\u7403\u76f8\u4ea4 bool IsRayHitSphere(const Sphere& sphere, const Vector3f& start, const Vector3f& pntOn, vector<Vector3f>& pntsHit); // \u5c04\u7ebf\u662f\u5426\u4e0e\u9762\u76f8\u4ea4 bool IsRayHitFace(const Face& face, const Vector3f& faceNormal, const Vector3f& ptOri, const Vector3f& dir, double& t); // \u5c04\u7ebf\u662f\u5426\u4e0e\u4e09\u89d2\u76f8\u4ea4 bool IsRayHitTriangle(const Vector3f& orig, const Vector3f& dir, const Vector3f& v0, const Vector3f& v1, const Vector3f& v2, double* t); // \u5c04\u7ebf\u662f\u5426\u4e0e\u5305\u56f4\u76d2\u76f8\u4ea4 bool IsRayHitBoundingBox(const Vector3f& rayStart, const Vector3f& rayDir, const Vector3f* boundBoxMin, const Vector3f* boundBoxMax, Vector3f& interPt0, Vector3f& interPt1); // \u7a7a\u95f4\u7ebf\u662f\u5426\u76f8\u4ea4 bool IsLineIntersect(const Line& line1, const Line& line2, Vector3d& intersection); // \u7a7a\u95f4\u9762\u662f\u5426\u76f8\u4ea4 bool IsPlaneIntersect(const Vector3f& point1, const Vector3f& normal1, const Vector3f& point2, const Vector3f& normal2, Vector3f& ptOnInterLine, Vector3f& dirInterLine);","title":"5.\u5173\u7cfb\u8ba1\u7b97"},{"location":"#6","text":"\u7f51\u683c\u5316\u662f\u56fe\u5f62\u51e0\u4f55\u7684\u6838\u5fc3\u8bdd\u9898\u4e4b\u4e00\uff0c\u4e5f\u662f\u8bc4\u5224\u51e0\u4f55\u5e93\u80fd\u529b\u7684\u91cd\u8981\u6307\u6807\u4f9d\u8d56\u9879\u3002 \u7f51\u683c\u5316\u5305\u62ecDelaunay\u4e09\u89d2\u5256\u5206\u3001Voronoi\u56fe\u751f\u6210\u3001\u7f51\u683c\u5256\u5206\u7b49\u5185\u5bb9\u3002","title":"6.\u7f51\u683c\u5316"},{"location":"#61delaunay","text":"CGLib Delaunay\u4e09\u89d2\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u70b9\u5e76\u901a\u8fc7Delaunay\u7f51\u683c\u751f\u6210\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1aDelaunay\u5256\u5206 \u56fe\uff1aDelaunay\u5256\u5206","title":"6.1.Delaunay\u4e09\u89d2\u5256\u5206"},{"location":"#62voronoi","text":"Voronoi\u56fe\u53ef\u7531Delaunay\u7f51\u683c\u751f\u6210\uff0c\u8ba1\u7b97Delaunay\u7f51\u683c\u6240\u6709\u7684\u4e09\u89d2\u5f62\u5916\u63a5\u5706\u7684\u5706\u5fc3\uff0c\u8fde\u63a5\u5404\u5706\u5fc3\u5f97\u5230\u7ef4\u8bfa\u56fe\u3002 Voronoi\u56fe\u4e2d\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684\u591a\u8fb9\u5f62\u7684\u8fb9\u6570\u53d6\u51b3\u4e8e\u8be5\u70b9\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u6570\u91cf\u3002\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684Voronoi\u56fe\u7684\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u76f8\u90bb\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u4e2d\u5fc3\u5c31\u662f\u591a\u8fb9\u5f62\u7684\u9876\u70b9\uff0c\u8fde\u63a5\u6240\u6709\u4e0e\u8be5\u70b9\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\u7684\u5916\u63a5\u5706\u4e2d\u5fc3\uff0c\u6784\u6210\u7684\u591a\u8fb9\u5f62\u5373\u4e3a\u8be5\u70b9\u5728Voronoi\u56fe\u4e2d\u7684\u5f62\u72b6\u3002","title":"6.2.Voronoi\u56fe"},{"location":"#63","text":"\u7f51\u683c\u5256\u5206\u5206\u4e3a\u4e8c\u7ef4\u548c\u4e09\u7ef4\u7f51\u683c\u5256\u5206\uff0c\u7814\u7a76\u8be5\u8bdd\u9898\u7684\u8bba\u6587\u975e\u5e38\u4e30\u5bcc\uff0c\u63d0\u4f9b\u591a\u79cd\u65b9\u6cd5\uff0c\u800c\u4e0d\u540c\u7684\u51e0\u4f55\u5e93\u91c7\u7528\u5404\u81ea\u9009\u62e9\u7684\u65b9\u6848\u8fdb\u884c\u5b9e\u73b0\uff0c\u5f53\u7136\u76f8\u540c\u7684\u65b9\u6848\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u6548\u679c\u548c\u8d28\u91cf\u3002 \u5bf9\u4e8e\u4e8c\u7ef4\u8f6e\u5ed3\u7684\u7f51\u683c\u5256\u5206\uff0c\u6709\u8033\u5207\u6cd5\u3001Delaunay\u65b9\u6cd5\u3001BSP\u5206\u5272\u6cd5\u3001\u57fa\u4e8e\u51f8\u5206\u89e3\u7684\u5256\u5206\u6cd5\u7b49\u65b9\u6cd5\u3002 CGLib\u91c7\u7528\u8033\u5207\u6cd5\u5b9e\u73b0\u4e8c\u7ef4\u7f51\u683c\u5256\u5206\u7b97\u6cd5\uff0c\u652f\u6301\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\u7684\u5256\u5206\uff0c\u652f\u6301\u5e26\u6709\u6d1e\u53e3\u548c\u5d4c\u5957\u5c9b\u6d1e\u7684\u60c5\u51b5\u3002 CGLib\u540c\u65f6\u63d0\u4f9b\u51f8\u5206\u89e3\u8ba1\u7b97\uff0c\u53ef\u4ee5\u5728\u51f8\u5206\u89e3\u8ba1\u7b97\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u51f8\u8f6e\u5ed3\u7684\u7f51\u683c\u5316\u8ba1\u7b97\uff0c\u5f53\u7136\u8fd9\u66f4\u591a\u7684\u662f\u4e00\u79cd\u7406\u5ff5\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u7a7a\u95f4\u66f2\u9762\u7684\u7f51\u683c\u5316\uff0cCGLib\u91c7\u7528Nurbs\u66f2\u9762\u7f51\u683c\u5316\u7684\u601d\u8def\uff0c\u5373\u4ece\u53c2\u6570\u5316\u66f2\u9762\u4e2d\u63d0\u53d6\u53c2\u6570\u70b9\u6784\u6210\u51f8\u591a\u8fb9\u5f62\uff0c\u7136\u540e\u4f7f\u7528Delaunay\u5256\u5206\u7684\u65b9\u6cd5\u5f97\u5230\u8fd1\u4f3c\u8868\u8fbe\u7a7a\u95f4\u66f2\u9762\u7684\u65e0\u91cd\u53e0\u94fa\u6ee1\u7684\u4e09\u89d2\u5f62\u3002 Attention \u503c\u5f97\u4e00\u63d0\u7684\u662fBSP\u5206\u5272\u6cd5\u66f4\u4fa7\u91cd\u4e8e\u7406\u5ff5\uff0c\u5728\u7406\u8bba\u4e0a\u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u7f51\u683c\u5256\u5206\u65b9\u6cd5\uff0c\u4f46\u4f1a\u4ea7\u751f\u96f6\u788e\u7684\u4e09\u89d2\u9762\uff0c\u8fd9\u4e9b\u4e09\u89d2\u9762\u53ef\u80fd\u548c\u8f6e\u5ed3\u9876\u70b9\u6ca1\u6709\u8fde\u63a5\u5173\u7cfb\uff0c\u4e00\u822c\u5177\u4f53\u5b9e\u73b0\u4e2d\u4e0d\u4f1a\u91c7\u7528\u6b64\u65b9\u6cd5\u8fdb\u884c\u7f51\u683c\u5316\u8ba1\u7b97\u3002 // CGUtils.h static void TessellateBody(const Body& body, TriangleMesh& mesh); static void TessellateFace(const Face& face, TriangleMesh& mesh); static void TessellateFace(const Face& face, vector<Vector3f>& lstPoint, vector<unsigned>& lstTri, vector<unsigned>& edges, vector<Vector3f>& normals, vector<Vector2f>& uvs); static void TessellatePolygon(const vector<Vector3f>& lstPoint, const Vector3f& normal, TriangleMesh& mesh); // \u8f6e\u5ed3\u6811\uff08\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u8f6e\u5ed3\u96c6\u5408\uff09\u7f51\u683c\u5316 static void TessellatePolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, list<Vector3f>& lstPoints, list<unsigned int>& lstTris, list<unsigned int>& lstEdge, list<Vector3f>& lstNormal, list<Vector2f>& lstUv); static void TessellatePolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, TriangleMesh& mesh);","title":"6.3.\u7f51\u683c\u5256\u5206"},{"location":"#631","text":"CGLib\u63d0\u4f9b\u7684\u7f51\u683c\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u7f51\u683c\u5256\u5206\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u201c\u6811\u72b6\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u201c\u7897\u72b6\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u201c\u679d\u5934\u7684\u679c\u5b50\u201d\u8f6e\u5ed3\u8033\u5207\u6cd5\u6548\u679c \u56fe\uff1a\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a","title":"6.3.1.\u4e8c\u7ef4\u7f51\u683c\u5256\u5206"},{"location":"#632","text":"CGLib\u63d0\u4f9b\u7684\u4e09\u7ef4\u7f51\u683c\u5256\u5206\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u5b9e\u4f53\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a \u56fe\uff1a\u5b9e\u4f53\u7f51\u683c\u6570\u636e\u5728OpenGL\u4e2d\u7684\u663e\u793a","title":"6.3.2.\u4e09\u7ef4\u7f51\u683c\u5256\u5206"},{"location":"#7","text":"\u5e03\u5c14\u8fd0\u7b97\u548c\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5bc6\u5207\u76f8\u5173\uff0c\u5206\u4e3a\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u548c\u4e09\u7ef4\u5e03\u5c14\u8fd0\u7b97\u3002\u7ecf\u8fc7\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5\u5f97\u5230 A\u2229B \u3001 A\u222aB \u3001 A-B \u548c B-A \u90e8\u5206\u3002","title":"7.\u5e03\u5c14\u8fd0\u7b97"},{"location":"#71","text":"\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5 \u4ee5\u70b9\u4e3a\u5355\u5143 \u6216 \u4ee5\u7ebf\u4e3a\u5355\u5143 \u8fdb\u884c\u8ba1\u7b97\u3002 CGLib\u63d0\u4f9b\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97\u8ba1\u7b97\u3002 // BooleanUtils.h // \u53d6\u53cd static void AntiPolygon(const list<Line>& polygon, list<Line>& result); static void AntiPolygon(const list<list<Line>>& polygon, list<list<Line>>& result); // \u4ea4\u96c6 static void Intersect(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); // \u5e76\u96c6 static void Union(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); // \u5dee\u96c6 static void Difference(const Vector3f& normal, const list<Line>& outer1, const list<list<Line>>& inner1, const list<Line>& outer2, const list<list<Line>>& inner2, list<list<Line>>& result); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u5e03\u5c14\u8fd0\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u4ea4\u663e\u793a \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u5e76\u663e\u793a \u56fe\uff1a\u8f6e\u5ed3\u5e03\u5c14\u51cf\u663e\u793a","title":"7.1.\u4e8c\u7ef4\u5e03\u5c14\u8fd0\u7b97"},{"location":"#72","text":"\u6839\u636e\u5b9e\u4f53\u7ed3\u6784\u8868\u8fbe\u65b9\u5f0f\u5206\u4e3a BRep\u5e03\u5c14\u8fd0\u7b97 \u3001 CSG\u5e03\u5c14\u8fd0\u7b97 \u3001 \u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 \u7b49\uff0c\u800c\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u53c8\u6709\u591a\u79cd\uff0c\u5982BSP\u65b9\u5f0f\u3001\u516b\u53c9\u6811\u65b9\u5f0f\u3002 CGLib\u63d0\u4f9bBRep\u5e03\u5c14\u8fd0\u7b97\u3001\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5176\u4e2d\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u63d0\u4f9bBSP\u65b9\u5f0f\u548c\u516b\u53c9\u6811\u65b9\u5f0f\u3002 // CGUtils.h // BRep\u5e03\u5c14\u8fd0\u7b97 static void BodyIntersect(const Body& body1, const Body& body2, vector<Face>& facesInter); static void BodyUnion(const Body& body1, const Body& body2, vector<Face>& facesUnion); static void BodyDifference(const Body& body1, const Body& body2, vector<Face>& facesResult); // mesh BSP\u5e03\u5c14\u8fd0\u7b97 // \u6ce8\u610f\uff1a\u5efa\u8baeforceOperate\u4f20\u53c2\u503cfalse\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u9519\u629b\u5f02\u5e38 static void BodyIntersect(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& inter, bool forceOperate); static void BodyUnion(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshUnion, bool forceOperate); static void BodyDifference(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshDiff, bool forceOperate); // mesh \u516b\u53c9\u6811\u5e03\u5c14\u8fd0\u7b97 static void BodyIntersect_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& inter); static void BodyDiff_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshDiff); static void BodyUnion_CSGOctTree(const TriangleMesh& meshA, const TriangleMesh& meshB, TriangleMesh& meshUnion); Attention \u503c\u5f97\u6307\u51fa\u7684\u662fBSP\u65b9\u5f0f\u66f4\u591a\u7684\u662f\u7406\u5ff5\u65b9\u6cd5\uff0c\u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u4e00\u822c\u4e0d\u91c7\u7528\u6b64\u65b9\u5f0f\uff0cBSP\u65b9\u5f0f\u903b\u8f91\u7b80\u5355\u66b4\u529b\uff0c\u6548\u7387\u8f83\u4f4e\uff0c\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u96f6\u788e\u4e09\u89d2\u9762\uff0c\u4e14\u5bf9\u6570\u636e\u89c4\u8303\u6027\u8981\u6c42\u8f83\u9ad8\uff0c\u9002\u7528\u6027\u8f83\u5dee\uff0c\u5b9e\u9645\u5de5\u7a0b\u6570\u636e\u6765\u6e90\u591a\uff0c\u5f88\u96be\u4fdd\u8bc1\u5b8c\u5168\u63d0\u4f9b\u7b26\u5408\u5176\u8981\u6c42\u7684\u6570\u636e\uff0c\u4e0d\u5efa\u8bae\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u4e0d\u540c\u65b9\u5f0f\u7684\u5e03\u5c14\u8fd0\u7b97\u7b97\u6cd5\u5e76\u975e\u662f\u529f\u80fd\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u5373\u6709\u5176\u9002\u7528\u573a\u666f\u540c\u65f6\u4e0d\u53ef\u88ab\u53e6\u4e00\u79cd\u5b8c\u5168\u66ff\u4ee3\u3002\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u5e94\u7528\u573a\u666f\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\u65b9\u5f0f\u7684\u9009\u62e9\uff0c\u5982\u539f\u59cb\u5b9e\u4f53\u6570\u636e\u4e3a\u4e09\u89d2\u7f51\u683c\u7684\u65f6\u5019\u91c7\u7528\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\uff0c\u800c\u539f\u59cb\u5b9e\u4f53\u6570\u636e\u4e3aBRep\u5b9e\u4f53\u65f6\u91c7\u7528BRep\u5e03\u5c14\u8fd0\u7b97\u65b9\u5f0f\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1aBRep\u5e03\u5c14\u8fd0\u7b97\u6548\u679c \u56fe\uff1a\u516b\u53c9\u6811\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97 \u56fe\uff1a\u66f2\u9762\u6784\u4ef6\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97","title":"7.2.\u4e09\u7ef4\u5e03\u5c14\u8fd0\u7b97"},{"location":"#73","text":"\u5982\u4e0a\u8ff0\u7ae0\u8282\u63d0\u5230\u8fc7\uff0c\u4f5c\u4e3a\u57fa\u7840\u7684\u7b97\u6cd5\u5de5\u5177\uff0c\u5f88\u96be\u53bb\u9884\u6d4b\u8c03\u7528\u63a5\u53e3\u65f6\u4f20\u5165\u6570\u636e\u7684\u7279\u70b9\uff0c\u4e5f\u5f88\u96be\u53bb\u8fdb\u884c\u5b8c\u5168\u7406\u60f3\u5316\u7684\u9650\u5236\uff0c\u5f53\u7136\u5bf9\u4e8e\u9519\u8bef\u6570\u636e\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\u5f80\u5f80\u4e5f\u662f\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6848\uff0c\u4f46\u7531\u4e8e\u5b9e\u9645\u5de5\u7a0b\u7684\u590d\u6742\u6027\u548c\u4e2a\u6027\u5316\uff0c\u5b9e\u4f53\u6570\u636e\u5f80\u5f80\u53ef\u80fd\u4f1a \u4e0d\u89c4\u8303 \uff0c\u6ce8\u610f\u4e0d\u80fd\u7b80\u5355\u7684\u8d34\u4ee5 \u6570\u636e\u9519\u8bef \u7684\u6807\u7b7e\u4ece\u800c\u7b80\u5355\u5904\u7406\uff0c\u6bd4\u5982\u51e0\u4f55\u5b9e\u4f53\u5185\u90e8\u5d4c\u6709\u5185\u90e8\u51e0\u4f55\u5b9e\u4f53\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6b64\u7c7b\u6570\u636e\u7684\u517c\u5bb9\u5904\u7406\u4e5f\u662f\u5e03\u5c14\u8fd0\u7b97\u7b97\u6cd5\u9700\u8981\u8003\u8651\u7684\u8bdd\u9898\u3002 CGLib\u516b\u53c9\u6811\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97\u5bf9\u6570\u636e\u4e0d\u89c4\u8303\u60c5\u51b5\u8fdb\u884c\u7684\u5904\u7406\u548c\u65b9\u6848\u4f18\u5316\uff0c\u4f7f\u5176\u7ed3\u679c\u6570\u636e\u66f4\u8d34\u8fd1\u4e8e \u201c\u9884\u671f\u201d \u3002 \u56fe\uff1a\u4e0d\u89c4\u8303\u6570\u636e\u7684\u5904\u7406","title":"7.3.\u4e0d\u89c4\u8303\u6570\u636e\u7684\u5904\u7406"},{"location":"#8","text":"\u5b9e\u4f53\u9020\u578b\u662fCAD\u9886\u57df\u6838\u5fc3\u8bdd\u9898\uff0c\u53ef\u4ee5\u5206\u4e3a \u62c9\u4f38 \u3001 \u653e\u6837 \u3001 \u65cb\u8f6c \u3001 \u76f4\u7eb9 \u3001 \u878d\u5408 \u7b49\u591a\u79cd\u5b9e\u4f53\u7c7b\u578b\u7684\u6784\u9020\uff0c\u8fd8\u5305\u62ec\u5207\u5272\u3001\u5012\u89d2\u7b49\u5c40\u90e8\u9020\u578b\u4f18\u5316\u5185\u5bb9\uff0c\u7ed3\u5408\u4ee5\u5b9e\u4f53\u5e03\u5c14\u8fd0\u7b97\u53ef\u4ee5\u6784\u9020\u590d\u6742\u591a\u6837\u7684\u5b9e\u4f53\u6548\u679c\u3002 CGLib\u6db5\u76d6\u4e3b\u8981\u9020\u578b\u8bae\u9898\uff0c\u5305\u62ec\u9020\u578b\u3001\u5c40\u90e8\u9020\u578b\u4f18\u5316\u3001\u5e03\u5c14\u8fd0\u7b97\u7b49\u3002 // CGUtils.h // \u62c9\u4f38\u4f53 static void GenerateHColumnMesh(float H, float B1, float B2, float T1, float T2, float S, float height, const Vector3f& insert, TriangleMesh& mesh); static void GenerateHColumn(float H, float B1, float B2, float T1, float T2, float S, float height, const Vector3f& insert, Body& body); static void GenerateCube(const vector<Vector3f>& sectionPts, const Vector3f& normal, float height, Body& cube); static void GenerateCube(const Vector3f& pt0, const Vector3f& pt1, const Vector3f& pt2, const Vector3f& pt3, const Vector3f& pt4, const Vector3f& pt5, const Vector3f& pt6, const Vector3f& pt7, Body& cube); static void GenerateCircleColumn(float radius, float height, const Vector3f& insert, Body& body); static void ExtrusionPolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, double height, Body& body); // \u653e\u6837 static void CreateLoftingSolid(const vector<Vector3f>& profile, const vector<Line>& path, Body& lofting); // \u5207\u5272 static bool Cut(const Body& body, const Face& cutFace, list<Body>& keepParts, list<Body>& cuttedParts); // \u5012\u5706\u89d2 static bool Rounding(const Line* top, const Line* bottom, double faceAngle, const Vector3f& normal, list<Line>& topRe, list<Line>& bottomRe); // \u5012\u89d2 static bool Chamfer(Body& body, const Line& targetBorder, float expand, bool rounding); // \u66f2\u9762\u9020\u578b // \u6b63\u5728\u5efa\u8bbe\u4e2d\uff0c\u63a5\u53e3\u5c1a\u672a\u5f00\u653e \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u5de5\u5b57\u94a2\u67f1\u548c\u76f4\u7eb9\u66f2\u9762\u5b9e\u4f53\u9020\u578b \u56fe\uff1a\u5de5\u5b57\u94a2\u67f1\u4e0e\u76f4\u7eb9\u66f2\u9762\u5b9e\u4f53\u7684\u4ea4\u96c6 \u56fe\uff1a\u5c40\u90e8\u9020\u578b-\u5012\u89d2 \u56fe\uff1a\u5c40\u90e8\u9020\u578b-\u5706\u89d2","title":"8.\u5b9e\u4f53\u9020\u578b"},{"location":"#9","text":"\u66f2\u7ebf\u66f2\u9762\u662f\u56fe\u5f62\u51e0\u4f55\u96be\u5ea6\u76f8\u5bf9\u8f83\u9ad8\u7684\u5206\u652f\uff0c\u6309\u53c2\u6570\u5316\u65b9\u5f0f\u7684\u4e0d\u540c\u5206\u4e3a\u591a\u9879\u5f0f\u66f2\u7ebf\u66f2\u9762\u3001\u8d1d\u585e\u5c14\u66f2\u7ebf\u66f2\u9762\u3001Nurbs\uff08\u975e\u5747\u5300\u6709\u7406B\u6837\u6761\uff09\u66f2\u7ebf\u66f2\u9762\u7b49\u3002 CGLib\u6839\u636e \u300aThe NURBS Book 2nd\u300b \u4e2d\u7684\u7406\u8bba\u548c\u7b97\u6cd5\u8fdb\u884c\u66f2\u7ebf\u66f2\u9762\u53ca\u76f8\u5173\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u4e3b\u8981\u63d0\u4f9bNurbs\u66f2\u7ebf\u66f2\u9762\u53ca\u76f8\u5173\u7b97\u6cd5\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\uff1b \u66f2\u7ebf\u66f2\u9762\u76f8\u5173\u63a5\u53e3\u5c1a\u672a\u5f00\u653e\uff0c\u5efa\u8bbe\u4e2d\u3002 \u56fe\uff1a\u66f2\u9762\u5b9e\u4f53\u9020\u578b\u548c\u7f51\u683c\u5e03\u5c14\u8fd0\u7b97","title":"9.\u66f2\u7ebf\u66f2\u9762"},{"location":"#10","text":"\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u5177\u6709\u8303\u56f4\u5e7f\u3001\u4e13\u4e1a\u6df1\u7684\u7279\u70b9\uff0c\u6240\u652f\u6491\u7684\u9886\u57df\u540c\u6837\u5e7f\u6cdb\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u4f17\u591a\uff0c\u5728\u4e0a\u8ff0\u63d0\u5230\u7684\u4e3b\u8981\u8bdd\u9898\u4e4b\u5916\uff0c\u4ecd\u7136\u5b58\u5728\u4f17\u591a\u7684\u51e0\u4f55\u7b97\u6cd5\u5728\u652f\u6491\u591a\u6837\u573a\u666f\u7684\u5b9e\u73b0\u548c\u8fd0\u4f5c\u3002 \u4f5c\u8005\u5c06\u90e8\u5206\u7f57\u5217\u5982\u4e0b\uff0cCGLib\u5b9e\u73b0\u4e86\u5176\u4e2d\u90e8\u5206\u8bdd\u9898\uff0c *\u4f46\u76f8\u5173\u7684\u8bdd\u9898\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u8fd9\u4e9b\u51e0\u4f55\u5de5\u5177\u7b97\u6cd5\u662f\u56fe\u5f62\u51e0\u4f55\u5b66\u4e2d\u7684\u661f\u661f\u70b9\u70b9\uff0c\u4f7f\u5f97\u56fe\u5f62\u51e0\u4f55\u9886\u57df\u661f\u6c49\u707f\u70c2 \u3002","title":"10.\u5176\u4ed6\u8bae\u9898"},{"location":"#101","text":"\u200c\u200c\u7f51\u683c\u7b80\u5316\uff08Mesh Simplification\uff09\u200c\u662f\u200c\u8ba1\u7b97\u673a\u79d1\u5b66\u6280\u672f\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u6307\u7684\u662f\u57fa\u4e8e\u67d0\u79cd\u8bef\u5dee\u5ea6\u91cf\uff0c\u7528\u7b80\u5316\u7684\u7f51\u683c\u66f2\u9762\u53d6\u4ee3\u539f\u59cb\u7f51\u683c\u66f2\u9762\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u901a\u8fc7\u4e00\u7cfb\u5217\u5c40\u90e8\u7684\u7b80\u5316\u64cd\u4f5c\uff0c\u5982\u200c\u9876\u70b9\u5220\u9664\u548c\u200c\u8fb9\u584c\u9677\uff0c\u6765\u5b9e\u73b0\u7f51\u683c\u7b80\u5316\u7684\u76ee\u7684\u3002\u200c \u56fe\uff1a\u5e26\u5706\u89d2\u7684\u5de5\u5b57\u94a2\u7f51\u683c\u7b80\u5316\u6548\u679c","title":"10.1.\u7f51\u683c\u7b80\u5316"},{"location":"#102","text":"\u5e73\u9762\u6216\u7a7a\u95f4\u5e73\u9762\u4e2d\u5b58\u5728\u82e5\u5e72\u6761\u7ebf\uff0c\u4ece\u4e2d\u63d0\u53d6\u8f6e\u5ed3\u7684\u8fc7\u7a0b\u5373\u4e3a\u8f6e\u5ed3\u63d0\u53d6\u3002\u6839\u636e\u9700\u8981\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u6700\u5927\u5916\u56f4\u8f6e\u5ed3\u3001\u6240\u6709\u95ed\u5408\u8f6e\u5ed3\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5c06\u63d0\u53d6\u7684\u8f6e\u5ed3\u7ec4\u7ec7\u4e3a\u8f6e\u5ed3\u6811\uff0c\u65b9\u4fbf\u8fdb\u4e00\u6b65\u7684\u5e94\u7528\u3002 \u8f6e\u5ed3\u63d0\u53d6\u662f\u5939\u89d2\u6781\u503c\u8fd0\u7528\u7684\u7b97\u6cd5\uff0c\u4e0a\u8ff0\u7ae0\u8282\u4e2d\u7684\u51f8\u5305\u8ba1\u7b97\u4e5f\u662f\u5939\u89d2\u6781\u503c\u8fd0\u7528\u7684\u7b97\u6cd5\u3002 CGLib\u63d0\u4f9b\u7684\u8f6e\u5ed3\u63d0\u53d6\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h // \u63d0\u53d6\u8f6e\u5ed3\uff08\u6700\u5c0f\u5355\u5143\u8f6e\u5ed3\uff09 static void ExtractPolygon(const list<Line>& lines, const Vector3f& normal, list<list<Line>>& polygons, map<int, map<int, double>>& mapPolyIndex2NearIndex); // \u5c06\u8f6e\u5ed3\u96c6\u5408\u8f6c\u6362\u4e3a\u5177\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u8f6e\u5ed3\u6811 static void ConvertToPolygonTree(const list<list<Line>>& polygons, PolygonTree* polygonTree); static void ConvertToPolygonTree(list<list<list<Line>>::const_iterator>& polygons, PolygonTree* polygonTree); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u8f6e\u5ed3\u63d0\u53d6\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u201c\u53f6\u5b50\u201d\u8f6e\u5ed3\u7684\u63d0\u53d6 \u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u53ef\u80fd\u5b58\u5728 \u5927\u91cf\u7684\u7ebf\u6570\u636e \uff0c\u4e14\u53ef\u80fd\u5b58\u5728 \u7ebf\u91cd\u590d\u6216\u90e8\u5206\u91cd\u5408 \u7684\u60c5\u51b5\uff0cCGLib\u540c\u6837\u652f\u6301\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u8f6e\u5ed3\u7cbe\u786e\u548c\u5b8c\u6574\u7684\u63d0\u53d6\uff0c\u4ee5\u8f83\u9ad8\u7684\u6548\u7387\u5904\u7406\u3002\u4e0b\u56fe\u4e3a\u4ece2739\u6761\u7ebf\u6bb5\u4e2d\u63d0\u53d6\u8f6e\u5ed3\u7684\u6548\u679c\uff0c\u5b8c\u6574\u7684\u63d0\u53d6\u51fa49\u4e2a \u53f6\u5b50\u8f6e\u5ed3 \u3002 \u56fe\uff1a\u201c\u53f6\u5b50\u201d\u8f6e\u5ed3\u7684\u63d0\u53d6-2739\u6761\u7ebf\u6bb5\u4e2d\u63d0\u53d649\u4e2a\u8f6e\u5ed3 \u56fe\uff1a\u63d0\u53d6\u8f6e\u5ed3\u6811\u5e76\u663e\u793a","title":"10.2.\u8f6e\u5ed3\u63d0\u53d6"},{"location":"#103","text":"\u7a7a\u95f4\u6a21\u578b\u5f80\u5f80\u6bd4\u8f83\u590d\u6742\uff0c\u8bd5\u60f3\u4e00\u4e0b\uff0c\u57ce\u5e02\u4e2d\u6709\u82e5\u5e72\u57ce\u533a\uff0c\u6bcf\u4e2a\u57ce\u533a\u6709\u82e5\u5e72\u56ed\u533a\uff0c\u6bcf\u4e2a\u56ed\u533a\u6709\u82e5\u5e72\u697c\u5b87\uff0c\u6b64\u5916\u8fd8\u5b58\u5728\u5176\u4ed6\u5efa\u8bbe\u7269\u3001\u73af\u5883\u7269\uff0c\u8fd9\u5c06\u662f\u5de8\u5927\u7684\u4fe1\u606f\uff0c\u4e5f\u610f\u5473\u7740\u9700\u8981\u5de8\u5927\u7684\u6570\u636e\u624d\u80fd\u8868\u5f81\u57ce\u5e02\u4fe1\u606f\uff0c\u6b64\u5916\u8fd8\u6709\u6570\u91cf\u7ea7\u66f4\u5927\u7684\u52a8\u6001\u4fe1\u606f\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f80\u5f80\u9700\u8981\u5173\u6ce8\u6a21\u578b\u6216\u6784\u4ef6\u5916\u8868\u9762\uff0c\u751a\u81f3\u662f\u7c97\u7565\u7684\u5916\u8868\u9762\uff0c\u5982\u57ce\u5e02\u767d\u6a21\u6a21\u578b\u3001\u5730\u56fe\u73af\u5883\u6a21\u578b\u3001\u56ed\u533a\u5b8f\u89c2\u6a21\u578b\u3001\u5efa\u8bbe\u7269\u8868\u9762\u6a21\u578b\u7b49\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5916\u58f3\u63d0\u53d6\u7b97\u6cd5\u7684\u8c03\u7528\u3002 \u5916\u58f3\u63d0\u53d6\u7b97\u6cd5\u65b9\u6848\u8f83\u591a\uff0c\u5305\u62ec\u62d3\u6251\u94fe\u63a5\u3001\u5916\u58f3\u62bd\u6790\u3001\u53ef\u89c1\u6027\u5254\u9664\u7b49\u591a\u79cd\u65b9\u6848\u3002 \u56fe\uff1a\u5efa\u7b51\u7269\u5916\u58f3\u63d0\u53d6","title":"10.3.\u5916\u58f3\u63d0\u53d6"},{"location":"#104","text":"\u51f8\u5206\u89e3\u5206\u4e3a\u4e8c\u7ef4\u51f8\u5206\u89e3\u548c\u4e09\u7ef4\u51f8\u5206\u89e3\u3002\u50cf\u8bf8\u591a\u4e8c\u7ef4\u7b97\u6cd5\u7684\u63a8\u5e7f\u4e00\u6837\uff0c\u4e09\u7ef4\u51f8\u5206\u89e3\u4e5f\u53ef\u7531\u4e8c\u7ef4\u51f8\u5206\u89e3\u63a8\u5e7f\u800c\u5f97\u3002 \u7531\u591a\u79cd\u7b97\u6cd5\u65b9\u6848\u53ef\u4ee5\u5b9e\u73b0\u51f8\u5206\u89e3\uff0c\u5305\u62ec\u5939\u89d2\u6781\u503c\u6cd5\u3001BSP\u5206\u5272\u6cd5\u7b49\u3002 CGLib\u63d0\u4f9b\u7684\u51f8\u5206\u89e3\u63a5\u53e3\u548c\u8ba1\u7b97\u6548\u679c\u5982\u4e0b\uff0c // CGUtils.h // \u5bf9\u8f6e\u5ed3\u6811\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecompositionPolygonTree(const PolygonTree* polygonTree, const Vector3f& normal, list<list<Line>>& lstConvexPolygon); // \u5bf9\u8f6e\u5ed3\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecomposition(const list<Line>& polygon, const Vector3f& normal, list<list<Line>>& lstConvexPoly); // \u5bf9Face(\u53ef\u542b\u6709\u6d1e\u53e3)\u8fdb\u884c\u51f8\u5206\u89e3 static void ConvexDecomposition(const Face& face, const Vector3f& normal, list<list<Line>>& lstConvexPoly); \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u51f8\u5206\u89e3\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u8f6e\u5ed3\u51f8\u5206\u89e3\u6548\u679c","title":"10.4.\u51f8\u5206\u89e3"},{"location":"#105","text":"CGLib\u63d0\u4f9b\u8f6e\u5ed3\u94fa\u88c5\u7b97\u6cd5\u63a5\u53e3\uff0c\u53ef\u5bf9\u4efb\u610f\u591a\u8fb9\u5f62\u8f6e\u5ed3\uff08\u53ef\u5d4c\u5957\u6d1e\u53e3\uff09\u3001\u8f6e\u5ed3\u6811\u8fdb\u884c\u94fa\u88c5\uff0c\u63a5\u53e3\u548c\u6548\u679c\u5982\u4e0b\uff0c // Paving.h static void Run(const list<list<Line>>& polygon, double tileLen, double tileWid, double rotateAng, const Vector3f& start, list<list<Line>>& pavingTiles); \u56fe\uff1a\u8f6e\u5ed3\u94fa\u88c5\u6548\u679c \u56fe\uff1a\u8f6e\u5ed3\u94fa\u88c5\u6548\u679c\uff08\u7ebf\u6846\u6a21\u5f0f\uff09","title":"10.5.\u8f6e\u5ed3\u94fa\u88c5"},{"location":"#106","text":"\u4e3a\u589e\u5f3a\u6a21\u578b\u663e\u793a\u6548\u679c\uff0c\u51f8\u663e\u5c42\u6b21\u611f\uff0c\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u8f6e\u5ed3\u8fb9\u7ebf\u4fe1\u606f\u7684\u663e\u793a\uff0c\u5f53\u539f\u59cb\u51e0\u4f55\u6570\u636e\u4e3a\u4e09\u89d2\u9762\u6570\u636e\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u81ea\u52a8\u8fdb\u884c\u8fb9\u7ebf\u63d0\u53d6\uff0c\u8fd9\u5c31\u9700\u8981\u8fb9\u7ebf\u63d0\u53d6\u7b97\u6cd5\u3002 \u8865\u5145\uff1a \u4e3a\u533a\u5206\u4e8e 10.2 \u8282\u4e2d\u7684 \u8f6e\u5ed3\u63d0\u53d6 \u7b97\u6cd5\uff0c\u672c\u8282\u91c7\u7528 \u8fb9\u7ebf\u63d0\u53d6 \u4f5c\u4e3a\u5f53\u524d\u7b97\u6cd5\u7684\u540d\u79f0\u3002 \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GLViewer \u4e2d\u8c03\u7528CGLib\u8fdb\u884c\u5904\u7406\u548c\u6e32\u67d3\u663e\u793a\u7684\u3002 \u56fe\uff1a\u8fb9\u7ebf\u63d0\u53d6\u548c\u663e\u793a","title":"10.6.\u8fb9\u7ebf\u63d0\u53d6"},{"location":"#107","text":"\u5728\u5b9e\u9645\u5de5\u7a0b\u4e2d\u5f80\u5f80\u9700\u8981\u8bc6\u522b\u63d0\u53d6 \u5f62\u4f53\u4e00\u81f4 \u7684\u5143\u7d20\uff0c\u5982\u5728\u56fe\u7eb8\u4e2d\u63d0\u53d6\u76f8\u540c\u7684\u5b9e\u4f8b\u6807\u8bc6\u4ee5\u8fdb\u884c\u6570\u91cf\u7edf\u8ba1\u548c\u9020\u4ef7\u8ba1\u7b97\u3001\u5728\u4e09\u7ef4\u6a21\u578b\u4e2d\u8bc6\u522b\u548c\u63d0\u53d6\u51e0\u4f55\u4e00\u81f4\u7684\u6784\u4ef6\u4ee5\u8fdb\u884c\u51e0\u4f55\u6570\u636e\u7684\u5171\u4eab\u7b49\u3002 \u8865\u5145\uff1a \u8fd9\u91cc\u7684 \u5f62\u4f53\u4e00\u81f4 \u5e7f\u4e49\u4e0a\u8fd8\u6db5\u76d6\u975e\u5747\u5300\u4eff\u5c04\u53d8\u6362\u5173\u7cfb\u7684\u5143\u7d20\uff0c\u5728\u5b9e\u9645\u7b97\u6cd5\u5b9e\u73b0\u4e2d\u4e3a\u7b80\u5316\u7b97\u6cd5\u903b\u8f91\u548c\u5904\u7406\u8fc7\u7a0b\uff0c\u5f80\u5f80\u53ea\u5173\u6ce8\u5747\u5300\u7f29\u653e/\u65cb\u8f6c/\u5e73\u79fb\u4eff\u5c04\u53d8\u6362\u7684\u5143\u7d20\u7684 \u4e00\u81f4\u6027\u8bc6\u522b \u3002","title":"10.7.\u5b9e\u4f8b\u5316\u8bc6\u522b"},{"location":"#108","text":"\u78b0\u649e\u68c0\u67e5\u7b97\u6cd5\u53ef\u6839\u636e\u7a7a\u95f4\u57df\u89d2\u5ea6\u548c\u65f6\u95f4\u57df\u89d2\u5ea6\u8fdb\u884c\u5206\u7c7b\u3002","title":"10.8.\u78b0\u649e\u68c0\u67e5"},{"location":"#109","text":"\u8def\u5f84\u89c4\u5212\u662f\u8fd0\u52a8\u89c4\u5212\u7684\u4e3b\u8981\u7814\u7a76\u5185\u5bb9\u4e4b\u4e00\u3002\u8fd0\u52a8\u89c4\u5212\u7531\u8def\u5f84\u89c4\u5212\u548c\u8f68\u8ff9\u89c4\u5212\u7ec4\u6210\uff0c\u8fde\u63a5\u8d77\u70b9\u4f4d\u7f6e\u548c\u7ec8\u70b9\u4f4d\u7f6e\u7684\u5e8f\u5217\u70b9\u6216\u66f2\u7ebf\u79f0\u4e4b\u4e3a\u8def\u5f84\uff0c\u6784\u6210\u8def\u5f84\u7684\u7b56\u7565\u79f0\u4e4b\u4e3a\u8def\u5f84\u89c4\u5212\u3002 \u8def\u5f84\u89c4\u5212\u5728\u5f88\u591a\u9886\u57df\u90fd\u5177\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5728\u9ad8\u65b0\u79d1\u6280\u9886\u57df\u7684\u5e94\u7528\u6709\uff1a\u673a\u5668\u4eba\u7684\u81ea\u4e3b\u65e0\u78b0\u884c\u52a8\uff1b\u65e0\u4eba\u673a\u7684\u907f\u969c\u7a81\u9632\u98de\u884c\uff1b\u5de1\u822a\u5bfc\u5f39\u8eb2\u907f\u96f7\u8fbe\u641c\u7d22\u3001\u9632\u53cd\u5f39\u88ad\u51fb\u3001\u5b8c\u6210\u7a81\u9632\u7206\u7834\u4efb\u52a1\u7b49\u3002","title":"10.9.\u8def\u5f84\u89c4\u5212"},{"location":"#1010","text":"CGLib\u652f\u6301\u5bf9\u91cd\u5408\u70b9\u8fdb\u884c\u53bb\u91cd\u5408\u5e76\uff0c\u63a5\u53e3\u5982\u4e0b\uff0c // CurveTool.h static void mergePoints(const list<Vector3f>& points, list<Vector3f>& result);","title":"10.10.\u70b9\u5408\u5e76"},{"location":"#1011","text":"\u5728\u56fe\u5f62\u51e0\u4f55\u4e2d\uff0c\u5171\u7ebf\u662f\u6307\u4e00\u7ec4\u70b9\u6216\u7ebf\u6bb5\u5728\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u60c5\u51b5\uff0c\u5305\u62ec\u5b8c\u5168\u91cd\u5408\u548c\u90e8\u5206\u91cd\u5408\u60c5\u51b5\u7684\u53bb\u91cd\u5408\u5e76\u5904\u7406\u3002\u4e00\u4e9b\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u7684\u524d\u5904\u7406\u8fc7\u7a0b\u9700\u8981\u8fdb\u884c\u5171\u7ebf\u5408\u5e76\uff0c\u5982 \u8f6e\u5ed3\u63d0\u53d6 \u3002 CGLib\u63d0\u4f9b\u5171\u7ebf\u5408\u5e76\u7b97\u6cd5\uff0c // CurveTool.h static void duplicateRemoval(const Vector3f& boundBoxMin, list<Line>& lines, bool ignoreDir);","title":"10.11.\u5171\u7ebf\u5408\u5e76"},{"location":"#1012","text":"\u5728\u4e00\u4e9b\u8ba1\u7b97\u4e2d\u5f80\u5f80\u9700\u8981\u5173\u6ce8\u548c\u76ee\u6807\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u4ee5\u8fdb\u4e00\u6b65\u8fdb\u884c\u5904\u7406\uff0cCGLib\u63d0\u4f9b\u4ece\u70b9\u96c6\u4e2d\u5bfb\u627e\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u7684\u8ba1\u7b97\u3002 CGLib\u63d0\u4f9b\u7684\u6700\u77ed\u8ddd\u79bb\u70b9\u8ba1\u7b97\u6548\u679c\u5982\u4e0b\uff0c \u63d0\u793a\uff1a \u5982\u4e0b\u6548\u679c\u56fe\u662f\u5728 GL2DViewer \u4e2d\u7ed8\u5236\u8f6e\u5ed3\u5e76\u901a\u8fc7\u6700\u77ed\u8ddd\u79bb\u70b9\u8ba1\u7b97\u547d\u4ee4\u63a7\u5236\u751f\u6210\u7684\u3002 \u56fe\uff1a\u6700\u77ed\u8ddd\u79bb\u70b9\u7684\u8bc6\u522b","title":"10.12.\u6700\u77ed\u8ddd\u79bb\u70b9"},{"location":"#11_1","text":"\u6d6e\u70b9\u503c\u7684\u5b58\u50a8\u3001\u8fd0\u7b97\u90fd\u53ef\u80fd\u4f1a\u5e26\u6765\u7cbe\u5ea6\u635f\u5931\uff0c\u4e86\u89e3\u7cbe\u5ea6\u635f\u5931\u80cc\u540e\u7684\u673a\u5236\u539f\u56e0\u65b9\u4fbf\u6211\u4eec\u66f4\u597d\u7684\u4e86\u89e3\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u7cbe\u5ea6\u635f\u5931\u3001\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7cbe\u5ea6\u635f\u5931\u8f83\u5927\uff0c\u4ee5\u53ca\u601d\u8003\u600e\u4e48\u907f\u514d\u6216\u51cf\u5c11\u7cbe\u5ea6\u635f\u5931\u3002 \u5728CGLib\u4e2d\u5173\u6ce8\u7b97\u6cd5\u7684\u7cbe\u5ea6\u8bdd\u9898\uff0c\u7531\u8bf8\u591a\u63aa\u65bd\u8fdb\u884c\u4f18\u5316\u548c\u4fdd\u969c\u3002 \u8865\u5145\uff1a \u76f8\u5173\u5185\u5bb9\u53ef\u53c2\u8003\u535a\u4e3bCSDN\u535a\u6587\uff1a \u5173\u4e8efloat\u6d6e\u70b9\u503c\u4e8c\u8fdb\u5236\u5b58\u50a8\u548c\u8fd0\u7b97\u7cbe\u5ea6\u635f\u5931\u7684\u8bdd\u9898","title":"11.\u7cbe\u5ea6\u548c\u8bef\u5dee"},{"location":"#12","text":"\u4e3a\u4fbf\u4e8eCGLib\u5e93\u7684\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u540c\u65f6\u5f00\u53d1\u4e86 GL2DViewer \uff08\u57fa\u4e8eWPF\u5b9e\u73b0\uff09\u548c GLViewer \uff08\u57fa\u4e8eOpenGL\u5b9e\u73b0\uff09\u5de5\u5177\u8fdb\u884cCGLib\u5e93\u7684\u5e94\u7528\u548c\u53ef\u89c6\u5316\u5448\u73b0\u3002 \u63d0\u793a\uff1a GLViewer\u53ef\u4ee5\u514d\u8d39\u4f7f\u7528\uff1a github\u4e0b\u8f7d \u3002 \u56fe\uff1aGL2DViewer \u56fe\uff1aGLViewer \u56fe\uff1a\u57fa\u4e8eWinform GDI+\u7684\u7ed3\u6784\u529b\u5b66\u6c42\u89e3\u5668","title":"12.\u663e\u793a"},{"location":"#13","text":"CGLib\u652f\u6301\u8de8\u5e73\u53f0\u3002 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41 \u6b22\u8fce\u5173\u6ce8\u548c\u4ea4\u6d41\u3002\u5fae\u4fe1\u516c\u4f17\u53f7\uff08 \u6587\u7ae0\u9876\u90e8 \uff09\u540e\u7eed\u4f1a\u66f4\u65b0\u76f8\u5173 \u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u6587\u7ae0 \uff0c\u6b22\u8fce\u4ea4\u6d41\u3002","title":"13.\u5176\u4ed6"},{"location":"code_repo/","text":"\u4ee3\u7801\u4ed3\u5e93 TODO......","title":"\u4ee3\u7801\u4ed3\u5e93"},{"location":"code_repo/#_1","text":"TODO......","title":"\u4ee3\u7801\u4ed3\u5e93"},{"location":"index-old/","text":"\u6b22\u8fce\u6765\u5230\u51e0\u4f55\u56fe\u5f62\u7684\u4e16\u754c \u6b22\u8fce\u6765\u5230\u51e0\u4f55\u56fe\u5f62\u7684\u4e16\u754c\u3002\u8fd9\u4e2a\u5de5\u7a0b\u662f\u5c55\u793a\u6211( \u54c8\u5e02\u96ea\u82b1 )\u5b66\u4e60\u548c\u7814\u7a76\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u70b9\u6ef4\u5185\u5bb9\u7684\u901a\u9053\uff0c\u5305\u62ec\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u7406\u5ff5\u3001\u539f\u7406\u3001\u6559\u7a0b\u548c\u6548\u679c\u3002\u65e0\u8bba\u4f60\u5b66\u4e60\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u662f\u4e3a\u4e86\u5b66\u4e1a\uff0c\u627e\u5de5\u4f5c\uff0c\u6216\u662f\u56e0\u4e3a\u5174\u8da3\uff0c\u8fd9\u4e2a\u7f51\u7ad9\u90fd\u5c06\u662f\u4f60\u503c\u5f97\u6765\u901b\u7684 \u53c2\u8003\u8d44\u6599 \u5e73\u53f0\uff0c\u6c47\u96c6\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u4ece\u57fa\u7840\uff0c\u4e2d\u7ea7\uff0c\u5230\u9ad8\u7ea7\u7684\u77e5\u8bc6\u3002 \u5982\u679c\u60a8\u559c\u6b22\u8fd9\u4e2a\u7cfb\u5217\u6559\u7a0b\u7684\u8bdd\uff0c\u4e0d\u59a8\u5173\u6ce8\u4f5c\u8005\uff0c\u652f\u6301\u4e00\u4e0b\u4f5c\u8005\uff0c\u8ba9\u8fd9\u4e2a\u6559\u7a0b\u80fd\u591f\u6301\u7eed\u5b8c\u5584\u5e76\u66f4\u65b0\u3002","title":"\u6b22\u8fce\u6765\u5230\u51e0\u4f55\u56fe\u5f62\u7684\u4e16\u754c"},{"location":"index-old/#_1","text":"\u6b22\u8fce\u6765\u5230\u51e0\u4f55\u56fe\u5f62\u7684\u4e16\u754c\u3002\u8fd9\u4e2a\u5de5\u7a0b\u662f\u5c55\u793a\u6211( \u54c8\u5e02\u96ea\u82b1 )\u5b66\u4e60\u548c\u7814\u7a76\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u70b9\u6ef4\u5185\u5bb9\u7684\u901a\u9053\uff0c\u5305\u62ec\u56fe\u5f62\u51e0\u4f55\u7b97\u6cd5\u7406\u5ff5\u3001\u539f\u7406\u3001\u6559\u7a0b\u548c\u6548\u679c\u3002\u65e0\u8bba\u4f60\u5b66\u4e60\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u662f\u4e3a\u4e86\u5b66\u4e1a\uff0c\u627e\u5de5\u4f5c\uff0c\u6216\u662f\u56e0\u4e3a\u5174\u8da3\uff0c\u8fd9\u4e2a\u7f51\u7ad9\u90fd\u5c06\u662f\u4f60\u503c\u5f97\u6765\u901b\u7684 \u53c2\u8003\u8d44\u6599 \u5e73\u53f0\uff0c\u6c47\u96c6\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u4ece\u57fa\u7840\uff0c\u4e2d\u7ea7\uff0c\u5230\u9ad8\u7ea7\u7684\u77e5\u8bc6\u3002 \u5982\u679c\u60a8\u559c\u6b22\u8fd9\u4e2a\u7cfb\u5217\u6559\u7a0b\u7684\u8bdd\uff0c\u4e0d\u59a8\u5173\u6ce8\u4f5c\u8005\uff0c\u652f\u6301\u4e00\u4e0b\u4f5c\u8005\uff0c\u8ba9\u8fd9\u4e2a\u6559\u7a0b\u80fd\u591f\u6301\u7eed\u5b8c\u5584\u5e76\u66f4\u65b0\u3002","title":"\u6b22\u8fce\u6765\u5230\u51e0\u4f55\u56fe\u5f62\u7684\u4e16\u754c"},{"location":"intro/","text":"\u7b80\u4ecb \u4f60\u5230\u8fd9\u91cc\u6765\u53ef\u80fd\u662f\u60f3\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u4e14\u81ea\u5df1\u505a\u4e00\u4e9b\u5f88\u9177\u7684\u4e1c\u897f\u3002\u81ea\u5df1\u505a\u4e1c\u897f\u662f\u975e\u5e38\u6709\u8da3\u7684\uff0c\u540c\u6837\u4e5f\u80fd\u7ed9\u4f60\u5e26\u6765\u5bf9\u56fe\u5f62\u7f16\u7a0b\u7684\u5174\u8da3\u3002\u7136\u800c\uff0c\u5728\u4f60\u5f00\u59cb\u5b66\u4e60\u65c5\u7a0b\u4e4b\u524d\uff0c\u6709\u8fd9\u4e48\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879\u3002 \u524d\u7f6e\u77e5\u8bc6 \u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u6210\u4e3a\u5de8\u4eba\uff0c\u7ad9\u5728\u81ea\u5df1\u7684\u80a9\u8180\u4e0a\u6210\u4e3a\u4e0b\u4e00\u4e2a\u81ea\u5df1\u3002 \u7ed3\u6784 \u7531\u6d45\u5165\u6df1\uff0c\u6ce8\u91cd\u539f\u7406\u548c\u601d\u8def\u7684\u4ecb\u7ecd\uff0c\u5c06\u8986\u76d6\u4e8c\u7ef4\u548c\u4e09\u7ef4\u5e38\u7528\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u8bdd\u9898\u3002 \u65b9\u6846 Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u662f\u5bf9\u8ba8\u8bba\u4e3b\u9898\u6709\u7528\u7684\u7279\u6027/\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u7279\u6027\u3002 \u4ee3\u7801 \u4f60\u5728\u7f51\u7ad9\u4e2d\u5c06\u4f1a\u770b\u5230\u5f88\u591a\u5c0f\u7247\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u5c06\u4f1a\u5728\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u6846\u4e2d\uff1a // \u8fd9\u4e2a\u5757\u662f\u4ee3\u7801 \u989c\u8272\u6807\u8bb0 \u6709\u4e00\u4e9b\u8bcd\u8bed\u4f1a\u4ee5\u4e0d\u540c\u989c\u8272\u663e\u793a\u51fa\u6765\uff0c\u7528\u6765\u8868\u793a\u8fd9\u4e9b\u8bcd\u8bed\u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a \u5b9a\u4e49 \uff1a\u7eff\u8272\u7684\u5b57\u662f\u5b9a\u4e49\uff0c\u5373\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u6216\u540d\u79f0\uff0c\u8fd9\u4e9b\u8bcd\u8bed\u4f60\u80fd\u7ecf\u5e38\u89c1\u5230\u3002 \u7a0b\u5e8f\u903b\u8f91 \uff1a\u7ea2\u8272\u7684\u5b57\u662f\u51fd\u6570\u7684\u540d\u79f0\u6216\u8005\u662f\u7c7b\u540d\u3002 \u53d8\u91cf \uff1a\u84dd\u8272\u7684\u5b57\u662f\u53d8\u91cf\uff0c\u5305\u62ec\u6240\u6709\u7684OpenGL\u5e38\u91cf\u3002 \u73b0\u5728\u4f60\u5e94\u8be5\u5bf9\u8fd9\u4e2a\u7f51\u7ad9\u7684\u7ed3\u6784\u6709\u4e00\u4e9b\u4e86\u89e3\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u5f00\u59cb\u5427\uff01","title":"\u7b80\u4ecb"},{"location":"intro/#_1","text":"\u4f60\u5230\u8fd9\u91cc\u6765\u53ef\u80fd\u662f\u60f3\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u4e14\u81ea\u5df1\u505a\u4e00\u4e9b\u5f88\u9177\u7684\u4e1c\u897f\u3002\u81ea\u5df1\u505a\u4e1c\u897f\u662f\u975e\u5e38\u6709\u8da3\u7684\uff0c\u540c\u6837\u4e5f\u80fd\u7ed9\u4f60\u5e26\u6765\u5bf9\u56fe\u5f62\u7f16\u7a0b\u7684\u5174\u8da3\u3002\u7136\u800c\uff0c\u5728\u4f60\u5f00\u59cb\u5b66\u4e60\u65c5\u7a0b\u4e4b\u524d\uff0c\u6709\u8fd9\u4e48\u51e0\u70b9\u6ce8\u610f\u4e8b\u9879\u3002","title":"\u7b80\u4ecb"},{"location":"intro/#_2","text":"\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u6210\u4e3a\u5de8\u4eba\uff0c\u7ad9\u5728\u81ea\u5df1\u7684\u80a9\u8180\u4e0a\u6210\u4e3a\u4e0b\u4e00\u4e2a\u81ea\u5df1\u3002","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"intro/#_3","text":"\u7531\u6d45\u5165\u6df1\uff0c\u6ce8\u91cd\u539f\u7406\u548c\u601d\u8def\u7684\u4ecb\u7ecd\uff0c\u5c06\u8986\u76d6\u4e8c\u7ef4\u548c\u4e09\u7ef4\u5e38\u7528\u51e0\u4f55\u56fe\u5f62\u7b97\u6cd5\u8bdd\u9898\u3002","title":"\u7ed3\u6784"},{"location":"intro/#_4","text":"Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u662f\u5bf9\u8ba8\u8bba\u4e3b\u9898\u6709\u7528\u7684\u7279\u6027/\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u7279\u6027\u3002","title":"\u65b9\u6846"},{"location":"intro/#_5","text":"\u4f60\u5728\u7f51\u7ad9\u4e2d\u5c06\u4f1a\u770b\u5230\u5f88\u591a\u5c0f\u7247\u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u5c06\u4f1a\u5728\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u6846\u4e2d\uff1a // \u8fd9\u4e2a\u5757\u662f\u4ee3\u7801","title":"\u4ee3\u7801"},{"location":"intro/#_6","text":"\u6709\u4e00\u4e9b\u8bcd\u8bed\u4f1a\u4ee5\u4e0d\u540c\u989c\u8272\u663e\u793a\u51fa\u6765\uff0c\u7528\u6765\u8868\u793a\u8fd9\u4e9b\u8bcd\u8bed\u6709\u4e0d\u540c\u7684\u610f\u4e49\uff1a \u5b9a\u4e49 \uff1a\u7eff\u8272\u7684\u5b57\u662f\u5b9a\u4e49\uff0c\u5373\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u6216\u540d\u79f0\uff0c\u8fd9\u4e9b\u8bcd\u8bed\u4f60\u80fd\u7ecf\u5e38\u89c1\u5230\u3002 \u7a0b\u5e8f\u903b\u8f91 \uff1a\u7ea2\u8272\u7684\u5b57\u662f\u51fd\u6570\u7684\u540d\u79f0\u6216\u8005\u662f\u7c7b\u540d\u3002 \u53d8\u91cf \uff1a\u84dd\u8272\u7684\u5b57\u662f\u53d8\u91cf\uff0c\u5305\u62ec\u6240\u6709\u7684OpenGL\u5e38\u91cf\u3002 \u73b0\u5728\u4f60\u5e94\u8be5\u5bf9\u8fd9\u4e2a\u7f51\u7ad9\u7684\u7ed3\u6784\u6709\u4e00\u4e9b\u4e86\u89e3\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u5f00\u59cb\u5427\uff01","title":"\u989c\u8272\u6807\u8bb0"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/","text":"1. \u524d\u8a00 \u51f8\u5305\u662f\u57fa\u7840\u51e0\u4f55\u7b97\u6cd5\u5de5\u5177\u51fd\u6570\uff0c\u4e00\u4e9b\u573a\u666f\u9700\u8981\u8ba1\u7b97\u5e76\u663e\u793a\u51f8\u5305\uff0c\u6216\u4f7f\u7528\u51f8\u5305\u4ee5\u52a0\u901f\u8ba1\u7b97\u3002\u8ba1\u7b97\u4e09\u7ef4\u51f8\u5305\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5982\u589e\u91cf\u6784\u5efa\u3001\u5206\u6cbb\u6cd5\u7b49\uff0c\u535a\u4e3b\u91c7\u7528\u589e\u91cf\u6784\u5efa\u65b9\u6cd5\u8ba1\u7b97\u51f8\u5305\u3002 \u6709\u5173\u4e8c\u7ef4\u51f8\u5305\u7684\u8ba1\u7b97\u8bf7\u53c2\u8003\u535a\u4e3b\u6b64\u524d\u6587\u7ae0\uff08\u5df2\u7ecf\u662f5\u5e74\u591a\u4ee5\u524d\u7684\u6587\u7ae0\u4e86\uff0c\u65f6\u5149\u834f\u82d2......\uff09 \u51f8\u5305\u8ba1\u7b97\uff1a\u6c42\u70b9\u96c6\u5408\u7684\u51f8\u5305\u8f6e\u5ed3 2. \u5185\u5bb9 2.1 \u6027\u8d28 \u4e09\u7ef4\u51f8\u5305\u6709\u5982\u4e0b\u51e0\u4e2a\u91cd\u8981\u6027\u8d28\uff1a \u90fd\u662f \u51f8\u89d2\u70b9 \uff0c\u6ca1\u6709 \u51f9\u89d2 \uff0c\u4e5f\u6ca1\u6709 \u5e73\u89d2 \uff08\u9876\u70b9\u5904\u4e8e\u5e73\u9762\u4e0a\u65f6\u6240\u5f62\u6210\u7684\u89d2\u70b9\uff09\uff1b \u51f8\u5305\u4e0a\u7684\u4efb\u4f55\u9762\u5747\u4e3a \u51f8\u8f6e\u5ed3 \uff1b \u51f8\u5305\u5bf9\u4efb\u610f\u65b9\u5411\u7684\u6295\u5f71\u5747\u4e3a \u51f8\u8f6e\u5ed3 \uff1b \u4e0a\u8ff0\u6027\u8d28\u5728\u8ba1\u7b97\u51f8\u5305\u65f6\u4f1a\u7528\u5230\uff0c 2.2 \u7b97\u6cd5\u601d\u8def \u91c7\u7528\u589e\u91cf\u6cd5\u6784\u5efa\u4e09\u7ef4\u51f8\u5305\u7684\u601d\u8def\u662f\u9012\u63a8\u6cd5\uff0c\u6784\u5efa\u6709\u6548\u521d\u59cb\u51f8\u5305\uff08\u9762\u2013>\u68f1\u9525\u4f53\uff09\uff0c\u7136\u540e\u518d\u6839\u636e\u70b9\u96c6\u4e2d\u7684\u70b9\u9010\u6b65\u66f4\u65b0\u5f53\u524d\u51f8\u5305\uff0c\u6700\u540e\u5f97\u5230\u7ed3\u679c\u3002 \u8f93\u5165\u4e3a\u70b9\u96c6 lstVerts \uff1b \u521d\u59cb\u5316\uff1a\u6784\u5efa\u7b2c\u4e00\u4e2a\u6709\u6548\u9762\uff0c\u901a\u5e38\u4e3a \u4e09\u89d2\u9762 \uff0c\u4ece\u70b9\u96c6\u4e2d\u9009\u53d6\u4e0d\u5171\u7ebf\u76843\u4e2a\u70b9\u6784\u5efa\u4e09\u89d2\u9762\uff1b\u521d\u59cb\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de false \uff1b\u521d\u59cb\u5316\u6210\u529f\u5219\u7ee7\u7eed\uff1b \u904d\u5386\u70b9\u96c6\u4e2d\u7684\u70b9 ptTarget \uff0c\u5c1d\u8bd5\u6784\u5efa\u7b2c\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e3a \u4e09\u68f1\u9525 \u6216 N\u68f1\u9525 \uff1b \u5982\u679c ptTarget \u4e0e\u6b64\u524d\u4e09\u89d2\u9762\u5171\u9762\uff0c\u5219\uff0c\u6c42 \u4e8c\u7ef4\u51f8\u5305 \uff0c\u5e76\u66f4\u65b0\u4e3a\u6b64\u524d\u9762\uff1b \u5982\u679c ptTarget \u4e0e\u6b64\u524d\u9762\u4e0d\u5171\u9762\uff0c\u5219\u6784\u5efa\u7b2c\u4e00\u4e2a \u68f1\u9525\u5b9e\u4f53 \uff1b \u7ee7\u7eed\u904d\u5386\u70b9\u96c6\u5f97\u5230 ptTarget \uff0c\u7528 ptTarget \u53bb\u66f4\u65b0\u6b64\u524d\u5f97\u5230\u7684\u51f8\u5305\u5b9e\u4f53\uff0c\u5f97\u5230\u65b0\u7684\u51f8\u5305\u5b9e\u4f53\uff1b \u51f8\u5305\u5b9e\u4f53\u4e2d\u7684\u4e00\u4e9b\u9762\u5bf9 ptTarget \u662f\u53ef\u89c1\u7684\uff0c\u5bf9\u4e8e\u53ef\u89c1\u9762\u6c42\u5176 \u5916\u56f4\u95ed\u5408\u8fb9\u7f18 \uff08 \u89c1\u4e0b\u56fe \uff09\uff0c\u95ed\u5408\u8fb9\u7f18\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u4e0e ptTarget \u6784\u9020\u4e09\u89d2\u5f62\uff0c\u52a0\u5165\u5230\u51f8\u5305\u5b9e\u4f53\u4e2d\uff1b \u6ce8\u610f\u53ef\u89c1\u9762\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a \u201c\u5b8c\u5168\u53ef\u89c1\u9762\u201d \u548c \u201c\u8fb9\u7f18\u53ef\u89c1\u9762\u201d \uff0c\u5bf9\u4e8e\u540e\u8005\uff0c\u70b9\u4e0e\u5176\u5171\u9762\uff0c\u9700\u8981\u6c42\uff08 ptTarget \u548c\u5f53\u524d\u9762\u7684\uff09 \u4e8c\u7ef4\u51f8\u5305 \u5e76\u6784\u9020\u65b0\u7684\u9762\u52a0\u5165\u5230\u5f53\u524d\u51f8\u5305\u5b9e\u4f53\u4e2d\uff1b \u5c06\u6240\u6709\u53ef\u89c1\u9762\u4ece\u51f8\u5305\u5b9e\u4f53\u4e2d\u5220\u9664\uff1b \u4e0d\u53ef\u89c1\u9762\u5219\u4e0d\u52a8\uff1b \u5f97\u5230\u51f8\u5305\u5b9e\u4f53 3DConvexHull \uff1b\u7b97\u6cd5\u7ed3\u675f\uff1b \u56fe\uff1a\u589e\u91cf\u6784\u5efa\u793a\u610f\u56fe 3. \u4ee3\u7801 bool GeometryUtils::Cal3DConvexHull(const list<Vector3f>& lstVertex, Body& convexHull) { // \u589e\u91cf\u6784\u5efa Face first; if (!ConstructFirstFace(lstVertex, first)) return false; convexHull.lstFace.push_back(first); //++itrItem; auto itrItem = lstVertex.begin(); for (;itrItem != lstVertex.end(); ++itrItem) { UpdateConvexHull(*itrItem, convexHull); } } 4. \u6548\u679c \u56fe\uff1a\u6548\u679c\u6982\u89c8 \u56fe\uff1a\u6548\u679c\u6982\u89c8 5. \u5199\u5728\u540e\u9762 \u56fe\u5f62\u51e0\u4f55\u3001\u6570\u636e\u5904\u7406\u3001\u5e76\u884c\u8ba1\u7b97\u76f8\u5173\u7814\u7a76\u548c\u7814\u53d1\uff0c\u516c\u4f17\u53f7\uff1a geometrylib \uff0c\u6b22\u8fce\u4ea4\u6d41\u3002 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u54c8\u5e02\u96ea\u82b1\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014","title":"\u4e09\u7ef4\u51f8\u5305"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#1","text":"\u51f8\u5305\u662f\u57fa\u7840\u51e0\u4f55\u7b97\u6cd5\u5de5\u5177\u51fd\u6570\uff0c\u4e00\u4e9b\u573a\u666f\u9700\u8981\u8ba1\u7b97\u5e76\u663e\u793a\u51f8\u5305\uff0c\u6216\u4f7f\u7528\u51f8\u5305\u4ee5\u52a0\u901f\u8ba1\u7b97\u3002\u8ba1\u7b97\u4e09\u7ef4\u51f8\u5305\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5982\u589e\u91cf\u6784\u5efa\u3001\u5206\u6cbb\u6cd5\u7b49\uff0c\u535a\u4e3b\u91c7\u7528\u589e\u91cf\u6784\u5efa\u65b9\u6cd5\u8ba1\u7b97\u51f8\u5305\u3002 \u6709\u5173\u4e8c\u7ef4\u51f8\u5305\u7684\u8ba1\u7b97\u8bf7\u53c2\u8003\u535a\u4e3b\u6b64\u524d\u6587\u7ae0\uff08\u5df2\u7ecf\u662f5\u5e74\u591a\u4ee5\u524d\u7684\u6587\u7ae0\u4e86\uff0c\u65f6\u5149\u834f\u82d2......\uff09 \u51f8\u5305\u8ba1\u7b97\uff1a\u6c42\u70b9\u96c6\u5408\u7684\u51f8\u5305\u8f6e\u5ed3","title":"1. \u524d\u8a00"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#2","text":"","title":"2. \u5185\u5bb9"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#21","text":"\u4e09\u7ef4\u51f8\u5305\u6709\u5982\u4e0b\u51e0\u4e2a\u91cd\u8981\u6027\u8d28\uff1a \u90fd\u662f \u51f8\u89d2\u70b9 \uff0c\u6ca1\u6709 \u51f9\u89d2 \uff0c\u4e5f\u6ca1\u6709 \u5e73\u89d2 \uff08\u9876\u70b9\u5904\u4e8e\u5e73\u9762\u4e0a\u65f6\u6240\u5f62\u6210\u7684\u89d2\u70b9\uff09\uff1b \u51f8\u5305\u4e0a\u7684\u4efb\u4f55\u9762\u5747\u4e3a \u51f8\u8f6e\u5ed3 \uff1b \u51f8\u5305\u5bf9\u4efb\u610f\u65b9\u5411\u7684\u6295\u5f71\u5747\u4e3a \u51f8\u8f6e\u5ed3 \uff1b \u4e0a\u8ff0\u6027\u8d28\u5728\u8ba1\u7b97\u51f8\u5305\u65f6\u4f1a\u7528\u5230\uff0c","title":"2.1 \u6027\u8d28"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#22","text":"\u91c7\u7528\u589e\u91cf\u6cd5\u6784\u5efa\u4e09\u7ef4\u51f8\u5305\u7684\u601d\u8def\u662f\u9012\u63a8\u6cd5\uff0c\u6784\u5efa\u6709\u6548\u521d\u59cb\u51f8\u5305\uff08\u9762\u2013>\u68f1\u9525\u4f53\uff09\uff0c\u7136\u540e\u518d\u6839\u636e\u70b9\u96c6\u4e2d\u7684\u70b9\u9010\u6b65\u66f4\u65b0\u5f53\u524d\u51f8\u5305\uff0c\u6700\u540e\u5f97\u5230\u7ed3\u679c\u3002 \u8f93\u5165\u4e3a\u70b9\u96c6 lstVerts \uff1b \u521d\u59cb\u5316\uff1a\u6784\u5efa\u7b2c\u4e00\u4e2a\u6709\u6548\u9762\uff0c\u901a\u5e38\u4e3a \u4e09\u89d2\u9762 \uff0c\u4ece\u70b9\u96c6\u4e2d\u9009\u53d6\u4e0d\u5171\u7ebf\u76843\u4e2a\u70b9\u6784\u5efa\u4e09\u89d2\u9762\uff1b\u521d\u59cb\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de false \uff1b\u521d\u59cb\u5316\u6210\u529f\u5219\u7ee7\u7eed\uff1b \u904d\u5386\u70b9\u96c6\u4e2d\u7684\u70b9 ptTarget \uff0c\u5c1d\u8bd5\u6784\u5efa\u7b2c\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e3a \u4e09\u68f1\u9525 \u6216 N\u68f1\u9525 \uff1b \u5982\u679c ptTarget \u4e0e\u6b64\u524d\u4e09\u89d2\u9762\u5171\u9762\uff0c\u5219\uff0c\u6c42 \u4e8c\u7ef4\u51f8\u5305 \uff0c\u5e76\u66f4\u65b0\u4e3a\u6b64\u524d\u9762\uff1b \u5982\u679c ptTarget \u4e0e\u6b64\u524d\u9762\u4e0d\u5171\u9762\uff0c\u5219\u6784\u5efa\u7b2c\u4e00\u4e2a \u68f1\u9525\u5b9e\u4f53 \uff1b \u7ee7\u7eed\u904d\u5386\u70b9\u96c6\u5f97\u5230 ptTarget \uff0c\u7528 ptTarget \u53bb\u66f4\u65b0\u6b64\u524d\u5f97\u5230\u7684\u51f8\u5305\u5b9e\u4f53\uff0c\u5f97\u5230\u65b0\u7684\u51f8\u5305\u5b9e\u4f53\uff1b \u51f8\u5305\u5b9e\u4f53\u4e2d\u7684\u4e00\u4e9b\u9762\u5bf9 ptTarget \u662f\u53ef\u89c1\u7684\uff0c\u5bf9\u4e8e\u53ef\u89c1\u9762\u6c42\u5176 \u5916\u56f4\u95ed\u5408\u8fb9\u7f18 \uff08 \u89c1\u4e0b\u56fe \uff09\uff0c\u95ed\u5408\u8fb9\u7f18\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u4e0e ptTarget \u6784\u9020\u4e09\u89d2\u5f62\uff0c\u52a0\u5165\u5230\u51f8\u5305\u5b9e\u4f53\u4e2d\uff1b \u6ce8\u610f\u53ef\u89c1\u9762\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a \u201c\u5b8c\u5168\u53ef\u89c1\u9762\u201d \u548c \u201c\u8fb9\u7f18\u53ef\u89c1\u9762\u201d \uff0c\u5bf9\u4e8e\u540e\u8005\uff0c\u70b9\u4e0e\u5176\u5171\u9762\uff0c\u9700\u8981\u6c42\uff08 ptTarget \u548c\u5f53\u524d\u9762\u7684\uff09 \u4e8c\u7ef4\u51f8\u5305 \u5e76\u6784\u9020\u65b0\u7684\u9762\u52a0\u5165\u5230\u5f53\u524d\u51f8\u5305\u5b9e\u4f53\u4e2d\uff1b \u5c06\u6240\u6709\u53ef\u89c1\u9762\u4ece\u51f8\u5305\u5b9e\u4f53\u4e2d\u5220\u9664\uff1b \u4e0d\u53ef\u89c1\u9762\u5219\u4e0d\u52a8\uff1b \u5f97\u5230\u51f8\u5305\u5b9e\u4f53 3DConvexHull \uff1b\u7b97\u6cd5\u7ed3\u675f\uff1b \u56fe\uff1a\u589e\u91cf\u6784\u5efa\u793a\u610f\u56fe","title":"2.2 \u7b97\u6cd5\u601d\u8def"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#3","text":"bool GeometryUtils::Cal3DConvexHull(const list<Vector3f>& lstVertex, Body& convexHull) { // \u589e\u91cf\u6784\u5efa Face first; if (!ConstructFirstFace(lstVertex, first)) return false; convexHull.lstFace.push_back(first); //++itrItem; auto itrItem = lstVertex.begin(); for (;itrItem != lstVertex.end(); ++itrItem) { UpdateConvexHull(*itrItem, convexHull); } }","title":"3. \u4ee3\u7801"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#4","text":"\u56fe\uff1a\u6548\u679c\u6982\u89c8 \u56fe\uff1a\u6548\u679c\u6982\u89c8","title":"4. \u6548\u679c"},{"location":"01%20Getting%20started/3DConvexHull/3DConvexHull/#5","text":"\u56fe\u5f62\u51e0\u4f55\u3001\u6570\u636e\u5904\u7406\u3001\u5e76\u884c\u8ba1\u7b97\u76f8\u5173\u7814\u7a76\u548c\u7814\u53d1\uff0c\u516c\u4f17\u53f7\uff1a geometrylib \uff0c\u6b22\u8fce\u4ea4\u6d41\u3002 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u54c8\u5e02\u96ea\u82b1\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014","title":"5. \u5199\u5728\u540e\u9762"},{"location":"img/","text":"\u56fe\u7247 \u8fd9\u4e2a\u76ee\u5f55\u4e2d\u6240\u6709\u56fe\u7247\u548c\u6587\u4ef6\u4ec5\u4e3a\u4fdd\u6301\u6559\u7a0b\u7684\u5b8c\u6574\u6027\u4ee5\u53ca\u53ef\u7528\u6027\u3002\u6587\u4ef6\u4e3a \u54c8\u5e02\u96ea\u82b1 \u6240\u6709\u3002\u6240\u6709\u6743\u5229\u5747\u4fdd\u7559\u3002 The images and files under this directory are here for integrity and accessibility purposes. All credit goes to \u54c8\u5e02\u96ea\u82b1 . All rights reserved.","title":"\u56fe\u7247"},{"location":"img/#_1","text":"\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u6240\u6709\u56fe\u7247\u548c\u6587\u4ef6\u4ec5\u4e3a\u4fdd\u6301\u6559\u7a0b\u7684\u5b8c\u6574\u6027\u4ee5\u53ca\u53ef\u7528\u6027\u3002\u6587\u4ef6\u4e3a \u54c8\u5e02\u96ea\u82b1 \u6240\u6709\u3002\u6240\u6709\u6743\u5229\u5747\u4fdd\u7559\u3002 The images and files under this directory are here for integrity and accessibility purposes. All credit goes to \u54c8\u5e02\u96ea\u82b1 . All rights reserved.","title":"\u56fe\u7247"}]}